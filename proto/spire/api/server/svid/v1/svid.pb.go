// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v6.30.2
// source: spire/api/server/svid/v1/svid.proto

package svidv1

import (
	types "github.com/spiffe/spire-api-sdk/proto/spire/api/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MintX509SVIDRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. ASN.1 DER encoded CSR. The CSR is used to convey the public
	// key and the SPIFFE ID (via the URI SAN). Only one URI SAN can be set.
	// Optionally, the subject and any number of DNS SANs can also be set.
	Csr []byte `protobuf:"bytes,1,opt,name=csr,proto3" json:"csr,omitempty"`
	// The desired TTL of the X509-SVID, in seconds. The server default will be
	// used if unset. The TTL is advisory only. The actual lifetime of the
	// X509-SVID may be lower depending on the remaining lifetime of the active
	// SPIRE Server CA.
	Ttl           int32 `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MintX509SVIDRequest) Reset() {
	*x = MintX509SVIDRequest{}
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MintX509SVIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintX509SVIDRequest) ProtoMessage() {}

func (x *MintX509SVIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintX509SVIDRequest.ProtoReflect.Descriptor instead.
func (*MintX509SVIDRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{0}
}

func (x *MintX509SVIDRequest) GetCsr() []byte {
	if x != nil {
		return x.Csr
	}
	return nil
}

func (x *MintX509SVIDRequest) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type MintX509SVIDResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The newly issued X509-SVID.
	Svid          *types.X509SVID `protobuf:"bytes,1,opt,name=svid,proto3" json:"svid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MintX509SVIDResponse) Reset() {
	*x = MintX509SVIDResponse{}
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MintX509SVIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintX509SVIDResponse) ProtoMessage() {}

func (x *MintX509SVIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintX509SVIDResponse.ProtoReflect.Descriptor instead.
func (*MintX509SVIDResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{1}
}

func (x *MintX509SVIDResponse) GetSvid() *types.X509SVID {
	if x != nil {
		return x.Svid
	}
	return nil
}

type MintJWTSVIDRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. SPIFFE ID of the JWT-SVID.
	Id *types.SPIFFEID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Required. List of audience claims to include in the JWT-SVID. At least one must
	// be set.
	Audience []string `protobuf:"bytes,2,rep,name=audience,proto3" json:"audience,omitempty"`
	// Desired TTL of the JWT-SVID, in seconds. The server default will be used
	// if unset. The TTL is advisory only. The actual lifetime of the JWT-SVID
	// may be lower depending on the remaining lifetime of the active SPIRE
	// Server CA.
	Ttl           int32 `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MintJWTSVIDRequest) Reset() {
	*x = MintJWTSVIDRequest{}
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MintJWTSVIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintJWTSVIDRequest) ProtoMessage() {}

func (x *MintJWTSVIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintJWTSVIDRequest.ProtoReflect.Descriptor instead.
func (*MintJWTSVIDRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{2}
}

func (x *MintJWTSVIDRequest) GetId() *types.SPIFFEID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MintJWTSVIDRequest) GetAudience() []string {
	if x != nil {
		return x.Audience
	}
	return nil
}

func (x *MintJWTSVIDRequest) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type MintJWTSVIDResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The newly issued JWT-SVID.
	Svid          *types.JWTSVID `protobuf:"bytes,1,opt,name=svid,proto3" json:"svid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MintJWTSVIDResponse) Reset() {
	*x = MintJWTSVIDResponse{}
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MintJWTSVIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintJWTSVIDResponse) ProtoMessage() {}

func (x *MintJWTSVIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintJWTSVIDResponse.ProtoReflect.Descriptor instead.
func (*MintJWTSVIDResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{3}
}

func (x *MintJWTSVIDResponse) GetSvid() *types.JWTSVID {
	if x != nil {
		return x.Svid
	}
	return nil
}

type BatchNewX509SVIDRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. One or more X509-SVID parameters for X509-SVID entries to
	// be signed.
	Params        []*NewX509SVIDParams `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchNewX509SVIDRequest) Reset() {
	*x = BatchNewX509SVIDRequest{}
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchNewX509SVIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchNewX509SVIDRequest) ProtoMessage() {}

func (x *BatchNewX509SVIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchNewX509SVIDRequest.ProtoReflect.Descriptor instead.
func (*BatchNewX509SVIDRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{4}
}

func (x *BatchNewX509SVIDRequest) GetParams() []*NewX509SVIDParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type BatchNewX509SVIDResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Result for each X509-SVID requested (order is maintained).
	Results       []*BatchNewX509SVIDResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchNewX509SVIDResponse) Reset() {
	*x = BatchNewX509SVIDResponse{}
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchNewX509SVIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchNewX509SVIDResponse) ProtoMessage() {}

func (x *BatchNewX509SVIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchNewX509SVIDResponse.ProtoReflect.Descriptor instead.
func (*BatchNewX509SVIDResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{5}
}

func (x *BatchNewX509SVIDResponse) GetResults() []*BatchNewX509SVIDResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type NewJWTSVIDRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The entry ID of the identity being requested.
	EntryId string `protobuf:"bytes,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	// Required. List of audience claims to include in the JWT-SVID. At least
	// one must be set.
	Audience      []string `protobuf:"bytes,2,rep,name=audience,proto3" json:"audience,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewJWTSVIDRequest) Reset() {
	*x = NewJWTSVIDRequest{}
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewJWTSVIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewJWTSVIDRequest) ProtoMessage() {}

func (x *NewJWTSVIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewJWTSVIDRequest.ProtoReflect.Descriptor instead.
func (*NewJWTSVIDRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{6}
}

func (x *NewJWTSVIDRequest) GetEntryId() string {
	if x != nil {
		return x.EntryId
	}
	return ""
}

func (x *NewJWTSVIDRequest) GetAudience() []string {
	if x != nil {
		return x.Audience
	}
	return nil
}

type NewJWTSVIDResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The newly issued JWT-SVID
	Svid          *types.JWTSVID `protobuf:"bytes,1,opt,name=svid,proto3" json:"svid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewJWTSVIDResponse) Reset() {
	*x = NewJWTSVIDResponse{}
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewJWTSVIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewJWTSVIDResponse) ProtoMessage() {}

func (x *NewJWTSVIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewJWTSVIDResponse.ProtoReflect.Descriptor instead.
func (*NewJWTSVIDResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{7}
}

func (x *NewJWTSVIDResponse) GetSvid() *types.JWTSVID {
	if x != nil {
		return x.Svid
	}
	return nil
}

type NewDownstreamX509CARequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The ASN.1 DER encoded Certificate Signing Request (CSR). The
	// CSR is only used to convey the public key; other fields in the CSR are
	// ignored. The X509-SVID attributes are determined by the downstream entry.
	Csr []byte `protobuf:"bytes,1,opt,name=csr,proto3" json:"csr,omitempty"`
	// Optional. The TTL preferred by the downstream SPIRE Server for the
	// signed intermediate CA. If zero, the upstream SPIRE Server will use its
	// own default.
	PreferredTtl  int32 `protobuf:"varint,2,opt,name=preferred_ttl,json=preferredTtl,proto3" json:"preferred_ttl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewDownstreamX509CARequest) Reset() {
	*x = NewDownstreamX509CARequest{}
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewDownstreamX509CARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewDownstreamX509CARequest) ProtoMessage() {}

func (x *NewDownstreamX509CARequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewDownstreamX509CARequest.ProtoReflect.Descriptor instead.
func (*NewDownstreamX509CARequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{8}
}

func (x *NewDownstreamX509CARequest) GetCsr() []byte {
	if x != nil {
		return x.Csr
	}
	return nil
}

func (x *NewDownstreamX509CARequest) GetPreferredTtl() int32 {
	if x != nil {
		return x.PreferredTtl
	}
	return 0
}

type NewDownstreamX509CAResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CA certificate and any intermediates required to form a chain of trust
	// back to the X.509 authorities (DER encoded). The CA certificate is the
	// first.
	CaCertChain [][]byte `protobuf:"bytes,1,rep,name=ca_cert_chain,json=caCertChain,proto3" json:"ca_cert_chain,omitempty"`
	// X.509 authorities (DER encoded).
	X509Authorities [][]byte `protobuf:"bytes,2,rep,name=x509_authorities,json=x509Authorities,proto3" json:"x509_authorities,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NewDownstreamX509CAResponse) Reset() {
	*x = NewDownstreamX509CAResponse{}
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewDownstreamX509CAResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewDownstreamX509CAResponse) ProtoMessage() {}

func (x *NewDownstreamX509CAResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewDownstreamX509CAResponse.ProtoReflect.Descriptor instead.
func (*NewDownstreamX509CAResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{9}
}

func (x *NewDownstreamX509CAResponse) GetCaCertChain() [][]byte {
	if x != nil {
		return x.CaCertChain
	}
	return nil
}

func (x *NewDownstreamX509CAResponse) GetX509Authorities() [][]byte {
	if x != nil {
		return x.X509Authorities
	}
	return nil
}

type NewX509SVIDParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The entry ID for the identity being requested.
	EntryId string `protobuf:"bytes,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	// Required. The ASN.1 DER encoded Certificate Signing Request (CSR). The
	// CSR is only used to convey the public key; other fields in the CSR are
	// ignored. The X509-SVID attributes are determined by the entry.
	Csr           []byte `protobuf:"bytes,2,opt,name=csr,proto3" json:"csr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewX509SVIDParams) Reset() {
	*x = NewX509SVIDParams{}
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewX509SVIDParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewX509SVIDParams) ProtoMessage() {}

func (x *NewX509SVIDParams) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewX509SVIDParams.ProtoReflect.Descriptor instead.
func (*NewX509SVIDParams) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{10}
}

func (x *NewX509SVIDParams) GetEntryId() string {
	if x != nil {
		return x.EntryId
	}
	return ""
}

func (x *NewX509SVIDParams) GetCsr() []byte {
	if x != nil {
		return x.Csr
	}
	return nil
}

type BatchNewX509SVIDResponse_Result struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The status of creating the X509-SVID.
	Status *types.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The newly created X509-SVID. This will be set if the status is OK.
	Svid          *types.X509SVID `protobuf:"bytes,2,opt,name=svid,proto3" json:"svid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchNewX509SVIDResponse_Result) Reset() {
	*x = BatchNewX509SVIDResponse_Result{}
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchNewX509SVIDResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchNewX509SVIDResponse_Result) ProtoMessage() {}

func (x *BatchNewX509SVIDResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchNewX509SVIDResponse_Result.ProtoReflect.Descriptor instead.
func (*BatchNewX509SVIDResponse_Result) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{5, 0}
}

func (x *BatchNewX509SVIDResponse_Result) GetStatus() *types.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BatchNewX509SVIDResponse_Result) GetSvid() *types.X509SVID {
	if x != nil {
		return x.Svid
	}
	return nil
}

var File_spire_api_server_svid_v1_svid_proto protoreflect.FileDescriptor

const file_spire_api_server_svid_v1_svid_proto_rawDesc = "" +
	"\n" +
	"#spire/api/server/svid/v1/svid.proto\x12\x18spire.api.server.svid.v1\x1a\x1dspire/api/types/jwtsvid.proto\x1a\x1espire/api/types/spiffeid.proto\x1a\x1cspire/api/types/status.proto\x1a\x1espire/api/types/x509svid.proto\"9\n" +
	"\x13MintX509SVIDRequest\x12\x10\n" +
	"\x03csr\x18\x01 \x01(\fR\x03csr\x12\x10\n" +
	"\x03ttl\x18\x02 \x01(\x05R\x03ttl\"E\n" +
	"\x14MintX509SVIDResponse\x12-\n" +
	"\x04svid\x18\x01 \x01(\v2\x19.spire.api.types.X509SVIDR\x04svid\"m\n" +
	"\x12MintJWTSVIDRequest\x12)\n" +
	"\x02id\x18\x01 \x01(\v2\x19.spire.api.types.SPIFFEIDR\x02id\x12\x1a\n" +
	"\baudience\x18\x02 \x03(\tR\baudience\x12\x10\n" +
	"\x03ttl\x18\x03 \x01(\x05R\x03ttl\"C\n" +
	"\x13MintJWTSVIDResponse\x12,\n" +
	"\x04svid\x18\x01 \x01(\v2\x18.spire.api.types.JWTSVIDR\x04svid\"^\n" +
	"\x17BatchNewX509SVIDRequest\x12C\n" +
	"\x06params\x18\x01 \x03(\v2+.spire.api.server.svid.v1.NewX509SVIDParamsR\x06params\"\xd9\x01\n" +
	"\x18BatchNewX509SVIDResponse\x12S\n" +
	"\aresults\x18\x01 \x03(\v29.spire.api.server.svid.v1.BatchNewX509SVIDResponse.ResultR\aresults\x1ah\n" +
	"\x06Result\x12/\n" +
	"\x06status\x18\x01 \x01(\v2\x17.spire.api.types.StatusR\x06status\x12-\n" +
	"\x04svid\x18\x02 \x01(\v2\x19.spire.api.types.X509SVIDR\x04svid\"J\n" +
	"\x11NewJWTSVIDRequest\x12\x19\n" +
	"\bentry_id\x18\x01 \x01(\tR\aentryId\x12\x1a\n" +
	"\baudience\x18\x02 \x03(\tR\baudience\"B\n" +
	"\x12NewJWTSVIDResponse\x12,\n" +
	"\x04svid\x18\x01 \x01(\v2\x18.spire.api.types.JWTSVIDR\x04svid\"S\n" +
	"\x1aNewDownstreamX509CARequest\x12\x10\n" +
	"\x03csr\x18\x01 \x01(\fR\x03csr\x12#\n" +
	"\rpreferred_ttl\x18\x02 \x01(\x05R\fpreferredTtl\"l\n" +
	"\x1bNewDownstreamX509CAResponse\x12\"\n" +
	"\rca_cert_chain\x18\x01 \x03(\fR\vcaCertChain\x12)\n" +
	"\x10x509_authorities\x18\x02 \x03(\fR\x0fx509Authorities\"@\n" +
	"\x11NewX509SVIDParams\x12\x19\n" +
	"\bentry_id\x18\x01 \x01(\tR\aentryId\x12\x10\n" +
	"\x03csr\x18\x02 \x01(\fR\x03csr2\xca\x04\n" +
	"\x04SVID\x12m\n" +
	"\fMintX509SVID\x12-.spire.api.server.svid.v1.MintX509SVIDRequest\x1a..spire.api.server.svid.v1.MintX509SVIDResponse\x12j\n" +
	"\vMintJWTSVID\x12,.spire.api.server.svid.v1.MintJWTSVIDRequest\x1a-.spire.api.server.svid.v1.MintJWTSVIDResponse\x12y\n" +
	"\x10BatchNewX509SVID\x121.spire.api.server.svid.v1.BatchNewX509SVIDRequest\x1a2.spire.api.server.svid.v1.BatchNewX509SVIDResponse\x12g\n" +
	"\n" +
	"NewJWTSVID\x12+.spire.api.server.svid.v1.NewJWTSVIDRequest\x1a,.spire.api.server.svid.v1.NewJWTSVIDResponse\x12\x82\x01\n" +
	"\x13NewDownstreamX509CA\x124.spire.api.server.svid.v1.NewDownstreamX509CARequest\x1a5.spire.api.server.svid.v1.NewDownstreamX509CAResponseBGZEgithub.com/spiffe/spire-api-sdk/proto/spire/api/server/svid/v1;svidv1b\x06proto3"

var (
	file_spire_api_server_svid_v1_svid_proto_rawDescOnce sync.Once
	file_spire_api_server_svid_v1_svid_proto_rawDescData []byte
)

func file_spire_api_server_svid_v1_svid_proto_rawDescGZIP() []byte {
	file_spire_api_server_svid_v1_svid_proto_rawDescOnce.Do(func() {
		file_spire_api_server_svid_v1_svid_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spire_api_server_svid_v1_svid_proto_rawDesc), len(file_spire_api_server_svid_v1_svid_proto_rawDesc)))
	})
	return file_spire_api_server_svid_v1_svid_proto_rawDescData
}

var file_spire_api_server_svid_v1_svid_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_spire_api_server_svid_v1_svid_proto_goTypes = []any{
	(*MintX509SVIDRequest)(nil),             // 0: spire.api.server.svid.v1.MintX509SVIDRequest
	(*MintX509SVIDResponse)(nil),            // 1: spire.api.server.svid.v1.MintX509SVIDResponse
	(*MintJWTSVIDRequest)(nil),              // 2: spire.api.server.svid.v1.MintJWTSVIDRequest
	(*MintJWTSVIDResponse)(nil),             // 3: spire.api.server.svid.v1.MintJWTSVIDResponse
	(*BatchNewX509SVIDRequest)(nil),         // 4: spire.api.server.svid.v1.BatchNewX509SVIDRequest
	(*BatchNewX509SVIDResponse)(nil),        // 5: spire.api.server.svid.v1.BatchNewX509SVIDResponse
	(*NewJWTSVIDRequest)(nil),               // 6: spire.api.server.svid.v1.NewJWTSVIDRequest
	(*NewJWTSVIDResponse)(nil),              // 7: spire.api.server.svid.v1.NewJWTSVIDResponse
	(*NewDownstreamX509CARequest)(nil),      // 8: spire.api.server.svid.v1.NewDownstreamX509CARequest
	(*NewDownstreamX509CAResponse)(nil),     // 9: spire.api.server.svid.v1.NewDownstreamX509CAResponse
	(*NewX509SVIDParams)(nil),               // 10: spire.api.server.svid.v1.NewX509SVIDParams
	(*BatchNewX509SVIDResponse_Result)(nil), // 11: spire.api.server.svid.v1.BatchNewX509SVIDResponse.Result
	(*types.X509SVID)(nil),                  // 12: spire.api.types.X509SVID
	(*types.SPIFFEID)(nil),                  // 13: spire.api.types.SPIFFEID
	(*types.JWTSVID)(nil),                   // 14: spire.api.types.JWTSVID
	(*types.Status)(nil),                    // 15: spire.api.types.Status
}
var file_spire_api_server_svid_v1_svid_proto_depIdxs = []int32{
	12, // 0: spire.api.server.svid.v1.MintX509SVIDResponse.svid:type_name -> spire.api.types.X509SVID
	13, // 1: spire.api.server.svid.v1.MintJWTSVIDRequest.id:type_name -> spire.api.types.SPIFFEID
	14, // 2: spire.api.server.svid.v1.MintJWTSVIDResponse.svid:type_name -> spire.api.types.JWTSVID
	10, // 3: spire.api.server.svid.v1.BatchNewX509SVIDRequest.params:type_name -> spire.api.server.svid.v1.NewX509SVIDParams
	11, // 4: spire.api.server.svid.v1.BatchNewX509SVIDResponse.results:type_name -> spire.api.server.svid.v1.BatchNewX509SVIDResponse.Result
	14, // 5: spire.api.server.svid.v1.NewJWTSVIDResponse.svid:type_name -> spire.api.types.JWTSVID
	15, // 6: spire.api.server.svid.v1.BatchNewX509SVIDResponse.Result.status:type_name -> spire.api.types.Status
	12, // 7: spire.api.server.svid.v1.BatchNewX509SVIDResponse.Result.svid:type_name -> spire.api.types.X509SVID
	0,  // 8: spire.api.server.svid.v1.SVID.MintX509SVID:input_type -> spire.api.server.svid.v1.MintX509SVIDRequest
	2,  // 9: spire.api.server.svid.v1.SVID.MintJWTSVID:input_type -> spire.api.server.svid.v1.MintJWTSVIDRequest
	4,  // 10: spire.api.server.svid.v1.SVID.BatchNewX509SVID:input_type -> spire.api.server.svid.v1.BatchNewX509SVIDRequest
	6,  // 11: spire.api.server.svid.v1.SVID.NewJWTSVID:input_type -> spire.api.server.svid.v1.NewJWTSVIDRequest
	8,  // 12: spire.api.server.svid.v1.SVID.NewDownstreamX509CA:input_type -> spire.api.server.svid.v1.NewDownstreamX509CARequest
	1,  // 13: spire.api.server.svid.v1.SVID.MintX509SVID:output_type -> spire.api.server.svid.v1.MintX509SVIDResponse
	3,  // 14: spire.api.server.svid.v1.SVID.MintJWTSVID:output_type -> spire.api.server.svid.v1.MintJWTSVIDResponse
	5,  // 15: spire.api.server.svid.v1.SVID.BatchNewX509SVID:output_type -> spire.api.server.svid.v1.BatchNewX509SVIDResponse
	7,  // 16: spire.api.server.svid.v1.SVID.NewJWTSVID:output_type -> spire.api.server.svid.v1.NewJWTSVIDResponse
	9,  // 17: spire.api.server.svid.v1.SVID.NewDownstreamX509CA:output_type -> spire.api.server.svid.v1.NewDownstreamX509CAResponse
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_spire_api_server_svid_v1_svid_proto_init() }
func file_spire_api_server_svid_v1_svid_proto_init() {
	if File_spire_api_server_svid_v1_svid_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spire_api_server_svid_v1_svid_proto_rawDesc), len(file_spire_api_server_svid_v1_svid_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spire_api_server_svid_v1_svid_proto_goTypes,
		DependencyIndexes: file_spire_api_server_svid_v1_svid_proto_depIdxs,
		MessageInfos:      file_spire_api_server_svid_v1_svid_proto_msgTypes,
	}.Build()
	File_spire_api_server_svid_v1_svid_proto = out.File
	file_spire_api_server_svid_v1_svid_proto_goTypes = nil
	file_spire_api_server_svid_v1_svid_proto_depIdxs = nil
}
