// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: spire/api/server/agent/v1/agent.proto

package agentv1

import (
	types "github.com/spiffe/spire-api-sdk/proto/spire/api/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CountAgentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filters the agents returned by the list operation.
	Filter *CountAgentsRequest_Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *CountAgentsRequest) Reset() {
	*x = CountAgentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAgentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAgentsRequest) ProtoMessage() {}

func (x *CountAgentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAgentsRequest.ProtoReflect.Descriptor instead.
func (*CountAgentsRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_agent_v1_agent_proto_rawDescGZIP(), []int{0}
}

func (x *CountAgentsRequest) GetFilter() *CountAgentsRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type CountAgentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountAgentsResponse) Reset() {
	*x = CountAgentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAgentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAgentsResponse) ProtoMessage() {}

func (x *CountAgentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAgentsResponse.ProtoReflect.Descriptor instead.
func (*CountAgentsResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_agent_v1_agent_proto_rawDescGZIP(), []int{1}
}

func (x *CountAgentsResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ListAgentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filters the agents returned by the list operation.
	Filter *ListAgentsRequest_Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// An output mask indicating which agent fields are set in the response.
	OutputMask *types.AgentMask `protobuf:"bytes,2,opt,name=output_mask,json=outputMask,proto3" json:"output_mask,omitempty"`
	// The maximum number of results to return. The server may further
	// constrain this value, or if zero, choose its own.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The next_page_token value returned from a previous request, if any.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListAgentsRequest) Reset() {
	*x = ListAgentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAgentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentsRequest) ProtoMessage() {}

func (x *ListAgentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentsRequest.ProtoReflect.Descriptor instead.
func (*ListAgentsRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_agent_v1_agent_proto_rawDescGZIP(), []int{2}
}

func (x *ListAgentsRequest) GetFilter() *ListAgentsRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListAgentsRequest) GetOutputMask() *types.AgentMask {
	if x != nil {
		return x.OutputMask
	}
	return nil
}

func (x *ListAgentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAgentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListAgentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The agents.
	Agents []*types.Agent `protobuf:"bytes,1,rep,name=agents,proto3" json:"agents,omitempty"`
	// The page token for the next request. Empty if there are no more results.
	// This field should be checked by clients even when a page_size was not
	// requested, since the server may choose its own (see page_size).
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListAgentsResponse) Reset() {
	*x = ListAgentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAgentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentsResponse) ProtoMessage() {}

func (x *ListAgentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentsResponse.ProtoReflect.Descriptor instead.
func (*ListAgentsResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_agent_v1_agent_proto_rawDescGZIP(), []int{3}
}

func (x *ListAgentsResponse) GetAgents() []*types.Agent {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *ListAgentsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The SPIFFE ID of the agent.
	Id *types.SPIFFEID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// An output mask indicating which agent fields are set in the response.
	OutputMask *types.AgentMask `protobuf:"bytes,2,opt,name=output_mask,json=outputMask,proto3" json:"output_mask,omitempty"`
}

func (x *GetAgentRequest) Reset() {
	*x = GetAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentRequest) ProtoMessage() {}

func (x *GetAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentRequest.ProtoReflect.Descriptor instead.
func (*GetAgentRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_agent_v1_agent_proto_rawDescGZIP(), []int{4}
}

func (x *GetAgentRequest) GetId() *types.SPIFFEID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetAgentRequest) GetOutputMask() *types.AgentMask {
	if x != nil {
		return x.OutputMask
	}
	return nil
}

type DeleteAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The SPIFFE ID of the agent.
	Id *types.SPIFFEID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAgentRequest) Reset() {
	*x = DeleteAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAgentRequest) ProtoMessage() {}

func (x *DeleteAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAgentRequest.ProtoReflect.Descriptor instead.
func (*DeleteAgentRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_agent_v1_agent_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteAgentRequest) GetId() *types.SPIFFEID {
	if x != nil {
		return x.Id
	}
	return nil
}

type BanAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The SPIFFE ID of the agent.
	Id *types.SPIFFEID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BanAgentRequest) Reset() {
	*x = BanAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanAgentRequest) ProtoMessage() {}

func (x *BanAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanAgentRequest.ProtoReflect.Descriptor instead.
func (*BanAgentRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_agent_v1_agent_proto_rawDescGZIP(), []int{6}
}

func (x *BanAgentRequest) GetId() *types.SPIFFEID {
	if x != nil {
		return x.Id
	}
	return nil
}

type AttestAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The data for the step in the attestation flow.
	//
	// Types that are assignable to Step:
	//	*AttestAgentRequest_Params_
	//	*AttestAgentRequest_ChallengeResponse
	Step isAttestAgentRequest_Step `protobuf_oneof:"step"`
}

func (x *AttestAgentRequest) Reset() {
	*x = AttestAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestAgentRequest) ProtoMessage() {}

func (x *AttestAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestAgentRequest.ProtoReflect.Descriptor instead.
func (*AttestAgentRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_agent_v1_agent_proto_rawDescGZIP(), []int{7}
}

func (m *AttestAgentRequest) GetStep() isAttestAgentRequest_Step {
	if m != nil {
		return m.Step
	}
	return nil
}

func (x *AttestAgentRequest) GetParams() *AttestAgentRequest_Params {
	if x, ok := x.GetStep().(*AttestAgentRequest_Params_); ok {
		return x.Params
	}
	return nil
}

func (x *AttestAgentRequest) GetChallengeResponse() []byte {
	if x, ok := x.GetStep().(*AttestAgentRequest_ChallengeResponse); ok {
		return x.ChallengeResponse
	}
	return nil
}

type isAttestAgentRequest_Step interface {
	isAttestAgentRequest_Step()
}

type AttestAgentRequest_Params_ struct {
	// Attestation parameters. These are only sent in the initial request.
	Params *AttestAgentRequest_Params `protobuf:"bytes,1,opt,name=params,proto3,oneof"`
}

type AttestAgentRequest_ChallengeResponse struct {
	// The response to a challenge issued by the attestor. Only sent in
	// response to a challenge received by the issuer.
	ChallengeResponse []byte `protobuf:"bytes,2,opt,name=challenge_response,json=challengeResponse,proto3,oneof"`
}

func (*AttestAgentRequest_Params_) isAttestAgentRequest_Step() {}

func (*AttestAgentRequest_ChallengeResponse) isAttestAgentRequest_Step() {}

type AttestAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Step:
	//	*AttestAgentResponse_Result_
	//	*AttestAgentResponse_Challenge
	Step isAttestAgentResponse_Step `protobuf_oneof:"step"`
}

func (x *AttestAgentResponse) Reset() {
	*x = AttestAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestAgentResponse) ProtoMessage() {}

func (x *AttestAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestAgentResponse.ProtoReflect.Descriptor instead.
func (*AttestAgentResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_agent_v1_agent_proto_rawDescGZIP(), []int{8}
}

func (m *AttestAgentResponse) GetStep() isAttestAgentResponse_Step {
	if m != nil {
		return m.Step
	}
	return nil
}

func (x *AttestAgentResponse) GetResult() *AttestAgentResponse_Result {
	if x, ok := x.GetStep().(*AttestAgentResponse_Result_); ok {
		return x.Result
	}
	return nil
}

func (x *AttestAgentResponse) GetChallenge() []byte {
	if x, ok := x.GetStep().(*AttestAgentResponse_Challenge); ok {
		return x.Challenge
	}
	return nil
}

type isAttestAgentResponse_Step interface {
	isAttestAgentResponse_Step()
}

type AttestAgentResponse_Result_ struct {
	// Attestation results. If set, attestation has completed.
	Result *AttestAgentResponse_Result `protobuf:"bytes,1,opt,name=result,proto3,oneof"`
}

type AttestAgentResponse_Challenge struct {
	// A challenge issued by the attestor. If set, the caller is expected
	// to send another request on the stream with the challenge response.
	Challenge []byte `protobuf:"bytes,2,opt,name=challenge,proto3,oneof"`
}

func (*AttestAgentResponse_Result_) isAttestAgentResponse_Step() {}

func (*AttestAgentResponse_Challenge) isAttestAgentResponse_Step() {}

type RenewAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Parameters for the X509-SVID.
	Params *AgentX509SVIDParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *RenewAgentRequest) Reset() {
	*x = RenewAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewAgentRequest) ProtoMessage() {}

func (x *RenewAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewAgentRequest.ProtoReflect.Descriptor instead.
func (*RenewAgentRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_agent_v1_agent_proto_rawDescGZIP(), []int{9}
}

func (x *RenewAgentRequest) GetParams() *AgentX509SVIDParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type RenewAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The renewed X509-SVID
	Svid *types.X509SVID `protobuf:"bytes,1,opt,name=svid,proto3" json:"svid,omitempty"`
}

func (x *RenewAgentResponse) Reset() {
	*x = RenewAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewAgentResponse) ProtoMessage() {}

func (x *RenewAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewAgentResponse.ProtoReflect.Descriptor instead.
func (*RenewAgentResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_agent_v1_agent_proto_rawDescGZIP(), []int{10}
}

func (x *RenewAgentResponse) GetSvid() *types.X509SVID {
	if x != nil {
		return x.Svid
	}
	return nil
}

type CreateJoinTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. How long until the token expires (in seconds).
	Ttl int32 `protobuf:"varint,1,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// An optional token value to use for the token. Must be unique. If unset,
	// the server will generate a value.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// An optional SPIFFE ID to assign to the agent beyond that given by
	// join token attestation. If set, this results in an entry being created
	// that maps the attestation assigned agent ID to this ID.
	AgentId *types.SPIFFEID `protobuf:"bytes,3,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
}

func (x *CreateJoinTokenRequest) Reset() {
	*x = CreateJoinTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateJoinTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateJoinTokenRequest) ProtoMessage() {}

func (x *CreateJoinTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateJoinTokenRequest.ProtoReflect.Descriptor instead.
func (*CreateJoinTokenRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_agent_v1_agent_proto_rawDescGZIP(), []int{11}
}

func (x *CreateJoinTokenRequest) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *CreateJoinTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CreateJoinTokenRequest) GetAgentId() *types.SPIFFEID {
	if x != nil {
		return x.AgentId
	}
	return nil
}

type AgentX509SVIDParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The ASN.1 DER encoded Certificate Signing Request (CSR). The
	// CSR is only used to convey the public key; other fields in the CSR are
	// ignored. The agent X509-SVID attributes are determined by the server.
	Csr []byte `protobuf:"bytes,1,opt,name=csr,proto3" json:"csr,omitempty"`
}

func (x *AgentX509SVIDParams) Reset() {
	*x = AgentX509SVIDParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentX509SVIDParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentX509SVIDParams) ProtoMessage() {}

func (x *AgentX509SVIDParams) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentX509SVIDParams.ProtoReflect.Descriptor instead.
func (*AgentX509SVIDParams) Descriptor() ([]byte, []int) {
	return file_spire_api_server_agent_v1_agent_proto_rawDescGZIP(), []int{12}
}

func (x *AgentX509SVIDParams) GetCsr() []byte {
	if x != nil {
		return x.Csr
	}
	return nil
}

type PostStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Serial number of the bundle currently being served by the agent
	CurrentBundleSerial uint64 `protobuf:"varint,1,opt,name=current_bundle_serial,json=currentBundleSerial,proto3" json:"current_bundle_serial,omitempty"`
}

func (x *PostStatusRequest) Reset() {
	*x = PostStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostStatusRequest) ProtoMessage() {}

func (x *PostStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostStatusRequest.ProtoReflect.Descriptor instead.
func (*PostStatusRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_agent_v1_agent_proto_rawDescGZIP(), []int{13}
}

func (x *PostStatusRequest) GetCurrentBundleSerial() uint64 {
	if x != nil {
		return x.CurrentBundleSerial
	}
	return 0
}

type PostStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PostStatusResponse) Reset() {
	*x = PostStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostStatusResponse) ProtoMessage() {}

func (x *PostStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostStatusResponse.ProtoReflect.Descriptor instead.
func (*PostStatusResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_agent_v1_agent_proto_rawDescGZIP(), []int{14}
}

type CountAgentsRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filters agents to those matching the attestation type.
	ByAttestationType string `protobuf:"bytes,1,opt,name=by_attestation_type,json=byAttestationType,proto3" json:"by_attestation_type,omitempty"`
	// Filters agents to those satisfying the selector match.
	BySelectorMatch *types.SelectorMatch `protobuf:"bytes,2,opt,name=by_selector_match,json=bySelectorMatch,proto3" json:"by_selector_match,omitempty"`
	// Filters agents to those that are banned.
	ByBanned *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=by_banned,json=byBanned,proto3" json:"by_banned,omitempty"`
	// Filters agents that can re-attest.
	ByCanReattest *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=by_can_reattest,json=byCanReattest,proto3" json:"by_can_reattest,omitempty"`
	// Filters agents by those expires before.
	ByExpiresBefore string `protobuf:"bytes,5,opt,name=by_expires_before,json=byExpiresBefore,proto3" json:"by_expires_before,omitempty"`
}

func (x *CountAgentsRequest_Filter) Reset() {
	*x = CountAgentsRequest_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAgentsRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAgentsRequest_Filter) ProtoMessage() {}

func (x *CountAgentsRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAgentsRequest_Filter.ProtoReflect.Descriptor instead.
func (*CountAgentsRequest_Filter) Descriptor() ([]byte, []int) {
	return file_spire_api_server_agent_v1_agent_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CountAgentsRequest_Filter) GetByAttestationType() string {
	if x != nil {
		return x.ByAttestationType
	}
	return ""
}

func (x *CountAgentsRequest_Filter) GetBySelectorMatch() *types.SelectorMatch {
	if x != nil {
		return x.BySelectorMatch
	}
	return nil
}

func (x *CountAgentsRequest_Filter) GetByBanned() *wrapperspb.BoolValue {
	if x != nil {
		return x.ByBanned
	}
	return nil
}

func (x *CountAgentsRequest_Filter) GetByCanReattest() *wrapperspb.BoolValue {
	if x != nil {
		return x.ByCanReattest
	}
	return nil
}

func (x *CountAgentsRequest_Filter) GetByExpiresBefore() string {
	if x != nil {
		return x.ByExpiresBefore
	}
	return ""
}

type ListAgentsRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filters agents to those matching the attestation type.
	ByAttestationType string `protobuf:"bytes,1,opt,name=by_attestation_type,json=byAttestationType,proto3" json:"by_attestation_type,omitempty"`
	// Filters agents to those satisfying the selector match.
	BySelectorMatch *types.SelectorMatch `protobuf:"bytes,2,opt,name=by_selector_match,json=bySelectorMatch,proto3" json:"by_selector_match,omitempty"`
	// Filters agents to those that are banned.
	ByBanned *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=by_banned,json=byBanned,proto3" json:"by_banned,omitempty"`
	// Filters agents that can re-attest.
	ByCanReattest *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=by_can_reattest,json=byCanReattest,proto3" json:"by_can_reattest,omitempty"`
	// Filters agents by those expires before.
	ByExpiresBefore string `protobuf:"bytes,5,opt,name=by_expires_before,json=byExpiresBefore,proto3" json:"by_expires_before,omitempty"`
}

func (x *ListAgentsRequest_Filter) Reset() {
	*x = ListAgentsRequest_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAgentsRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentsRequest_Filter) ProtoMessage() {}

func (x *ListAgentsRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentsRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListAgentsRequest_Filter) Descriptor() ([]byte, []int) {
	return file_spire_api_server_agent_v1_agent_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ListAgentsRequest_Filter) GetByAttestationType() string {
	if x != nil {
		return x.ByAttestationType
	}
	return ""
}

func (x *ListAgentsRequest_Filter) GetBySelectorMatch() *types.SelectorMatch {
	if x != nil {
		return x.BySelectorMatch
	}
	return nil
}

func (x *ListAgentsRequest_Filter) GetByBanned() *wrapperspb.BoolValue {
	if x != nil {
		return x.ByBanned
	}
	return nil
}

func (x *ListAgentsRequest_Filter) GetByCanReattest() *wrapperspb.BoolValue {
	if x != nil {
		return x.ByCanReattest
	}
	return nil
}

func (x *ListAgentsRequest_Filter) GetByExpiresBefore() string {
	if x != nil {
		return x.ByExpiresBefore
	}
	return ""
}

type AttestAgentRequest_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The attestation data.
	Data *types.AttestationData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Required. The X509-SVID parameters.
	Params *AgentX509SVIDParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *AttestAgentRequest_Params) Reset() {
	*x = AttestAgentRequest_Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestAgentRequest_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestAgentRequest_Params) ProtoMessage() {}

func (x *AttestAgentRequest_Params) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestAgentRequest_Params.ProtoReflect.Descriptor instead.
func (*AttestAgentRequest_Params) Descriptor() ([]byte, []int) {
	return file_spire_api_server_agent_v1_agent_proto_rawDescGZIP(), []int{7, 0}
}

func (x *AttestAgentRequest_Params) GetData() *types.AttestationData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AttestAgentRequest_Params) GetParams() *AgentX509SVIDParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type AttestAgentResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The agent X509-SVID.
	Svid *types.X509SVID `protobuf:"bytes,1,opt,name=svid,proto3" json:"svid,omitempty"`
	// Whether or not the attested agent can reattest to renew its X509-SVID
	Reattestable bool `protobuf:"varint,2,opt,name=reattestable,proto3" json:"reattestable,omitempty"`
}

func (x *AttestAgentResponse_Result) Reset() {
	*x = AttestAgentResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestAgentResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestAgentResponse_Result) ProtoMessage() {}

func (x *AttestAgentResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_agent_v1_agent_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestAgentResponse_Result.ProtoReflect.Descriptor instead.
func (*AttestAgentResponse_Result) Descriptor() ([]byte, []int) {
	return file_spire_api_server_agent_v1_agent_proto_rawDescGZIP(), []int{8, 0}
}

func (x *AttestAgentResponse_Result) GetSvid() *types.X509SVID {
	if x != nil {
		return x.Svid
	}
	return nil
}

func (x *AttestAgentResponse_Result) GetReattestable() bool {
	if x != nil {
		return x.Reattestable
	}
	return false
}

var File_spire_api_server_agent_v1_agent_proto protoreflect.FileDescriptor

var file_spire_api_server_agent_v1_agent_proto_rawDesc = []byte{
	0x0a, 0x25, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x78, 0x35, 0x30, 0x39, 0x73, 0x76, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x92, 0x03, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0xad, 0x02, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x2e, 0x0a, 0x13, 0x62, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62,
	0x79, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x4a, 0x0a, 0x11, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0f, 0x62, 0x79, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x37, 0x0a, 0x09,
	0x62, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x62, 0x79, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x62, 0x79, 0x5f, 0x63, 0x61, 0x6e, 0x5f,
	0x72, 0x65, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x62, 0x79, 0x43, 0x61,
	0x6e, 0x52, 0x65, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x79, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x79, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x22, 0x2b, 0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x89, 0x04, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0xad,
	0x02, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x79, 0x5f,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x79, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x62, 0x79, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x0f, 0x62, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x37, 0x0a, 0x09, 0x62, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x62, 0x79, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x42,
	0x0a, 0x0f, 0x62, 0x79, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x62, 0x79, 0x43, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62,
	0x79, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x22, 0x6c,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x79, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x50,
	0x49, 0x46, 0x46, 0x45, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x3f, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x50, 0x49, 0x46,
	0x46, 0x45, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3c, 0x0a, 0x0f, 0x42, 0x61, 0x6e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x50, 0x49, 0x46, 0x46, 0x45,
	0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa6, 0x02, 0x0a, 0x12, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2f, 0x0a,
	0x12, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x11, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x86,
	0x01, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x46, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x22,
	0xeb, 0x01, 0x0a, 0x13, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x1a, 0x5b, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x73, 0x76, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x04, 0x73, 0x76, 0x69,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x22, 0x5b, 0x0a,
	0x11, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x46, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x43, 0x0a, 0x12, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2d, 0x0a, 0x04, 0x73, 0x76, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x04, 0x73, 0x76, 0x69, 0x64, 0x22,
	0x76, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x34, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x50, 0x49, 0x46, 0x46, 0x45, 0x49, 0x44, 0x52, 0x07,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x13, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x73, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x63, 0x73, 0x72,
	0x22, 0x47, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0x14, 0x0a, 0x12, 0x50, 0x6f, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x80, 0x07, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x6c, 0x0a, 0x0b, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4e, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x2a,
	0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x54, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x12, 0x2d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x70, 0x0a, 0x0b, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x69, 0x0a, 0x0a, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a,
	0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x31, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4a, 0x6f,
	0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x69, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x49, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x2f, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2d, 0x61, 0x70,
	0x69, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spire_api_server_agent_v1_agent_proto_rawDescOnce sync.Once
	file_spire_api_server_agent_v1_agent_proto_rawDescData = file_spire_api_server_agent_v1_agent_proto_rawDesc
)

func file_spire_api_server_agent_v1_agent_proto_rawDescGZIP() []byte {
	file_spire_api_server_agent_v1_agent_proto_rawDescOnce.Do(func() {
		file_spire_api_server_agent_v1_agent_proto_rawDescData = protoimpl.X.CompressGZIP(file_spire_api_server_agent_v1_agent_proto_rawDescData)
	})
	return file_spire_api_server_agent_v1_agent_proto_rawDescData
}

var file_spire_api_server_agent_v1_agent_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_spire_api_server_agent_v1_agent_proto_goTypes = []interface{}{
	(*CountAgentsRequest)(nil),         // 0: spire.api.server.agent.v1.CountAgentsRequest
	(*CountAgentsResponse)(nil),        // 1: spire.api.server.agent.v1.CountAgentsResponse
	(*ListAgentsRequest)(nil),          // 2: spire.api.server.agent.v1.ListAgentsRequest
	(*ListAgentsResponse)(nil),         // 3: spire.api.server.agent.v1.ListAgentsResponse
	(*GetAgentRequest)(nil),            // 4: spire.api.server.agent.v1.GetAgentRequest
	(*DeleteAgentRequest)(nil),         // 5: spire.api.server.agent.v1.DeleteAgentRequest
	(*BanAgentRequest)(nil),            // 6: spire.api.server.agent.v1.BanAgentRequest
	(*AttestAgentRequest)(nil),         // 7: spire.api.server.agent.v1.AttestAgentRequest
	(*AttestAgentResponse)(nil),        // 8: spire.api.server.agent.v1.AttestAgentResponse
	(*RenewAgentRequest)(nil),          // 9: spire.api.server.agent.v1.RenewAgentRequest
	(*RenewAgentResponse)(nil),         // 10: spire.api.server.agent.v1.RenewAgentResponse
	(*CreateJoinTokenRequest)(nil),     // 11: spire.api.server.agent.v1.CreateJoinTokenRequest
	(*AgentX509SVIDParams)(nil),        // 12: spire.api.server.agent.v1.AgentX509SVIDParams
	(*PostStatusRequest)(nil),          // 13: spire.api.server.agent.v1.PostStatusRequest
	(*PostStatusResponse)(nil),         // 14: spire.api.server.agent.v1.PostStatusResponse
	(*CountAgentsRequest_Filter)(nil),  // 15: spire.api.server.agent.v1.CountAgentsRequest.Filter
	(*ListAgentsRequest_Filter)(nil),   // 16: spire.api.server.agent.v1.ListAgentsRequest.Filter
	(*AttestAgentRequest_Params)(nil),  // 17: spire.api.server.agent.v1.AttestAgentRequest.Params
	(*AttestAgentResponse_Result)(nil), // 18: spire.api.server.agent.v1.AttestAgentResponse.Result
	(*types.AgentMask)(nil),            // 19: spire.api.types.AgentMask
	(*types.Agent)(nil),                // 20: spire.api.types.Agent
	(*types.SPIFFEID)(nil),             // 21: spire.api.types.SPIFFEID
	(*types.X509SVID)(nil),             // 22: spire.api.types.X509SVID
	(*types.SelectorMatch)(nil),        // 23: spire.api.types.SelectorMatch
	(*wrapperspb.BoolValue)(nil),       // 24: google.protobuf.BoolValue
	(*types.AttestationData)(nil),      // 25: spire.api.types.AttestationData
	(*emptypb.Empty)(nil),              // 26: google.protobuf.Empty
	(*types.JoinToken)(nil),            // 27: spire.api.types.JoinToken
}
var file_spire_api_server_agent_v1_agent_proto_depIdxs = []int32{
	15, // 0: spire.api.server.agent.v1.CountAgentsRequest.filter:type_name -> spire.api.server.agent.v1.CountAgentsRequest.Filter
	16, // 1: spire.api.server.agent.v1.ListAgentsRequest.filter:type_name -> spire.api.server.agent.v1.ListAgentsRequest.Filter
	19, // 2: spire.api.server.agent.v1.ListAgentsRequest.output_mask:type_name -> spire.api.types.AgentMask
	20, // 3: spire.api.server.agent.v1.ListAgentsResponse.agents:type_name -> spire.api.types.Agent
	21, // 4: spire.api.server.agent.v1.GetAgentRequest.id:type_name -> spire.api.types.SPIFFEID
	19, // 5: spire.api.server.agent.v1.GetAgentRequest.output_mask:type_name -> spire.api.types.AgentMask
	21, // 6: spire.api.server.agent.v1.DeleteAgentRequest.id:type_name -> spire.api.types.SPIFFEID
	21, // 7: spire.api.server.agent.v1.BanAgentRequest.id:type_name -> spire.api.types.SPIFFEID
	17, // 8: spire.api.server.agent.v1.AttestAgentRequest.params:type_name -> spire.api.server.agent.v1.AttestAgentRequest.Params
	18, // 9: spire.api.server.agent.v1.AttestAgentResponse.result:type_name -> spire.api.server.agent.v1.AttestAgentResponse.Result
	12, // 10: spire.api.server.agent.v1.RenewAgentRequest.params:type_name -> spire.api.server.agent.v1.AgentX509SVIDParams
	22, // 11: spire.api.server.agent.v1.RenewAgentResponse.svid:type_name -> spire.api.types.X509SVID
	21, // 12: spire.api.server.agent.v1.CreateJoinTokenRequest.agent_id:type_name -> spire.api.types.SPIFFEID
	23, // 13: spire.api.server.agent.v1.CountAgentsRequest.Filter.by_selector_match:type_name -> spire.api.types.SelectorMatch
	24, // 14: spire.api.server.agent.v1.CountAgentsRequest.Filter.by_banned:type_name -> google.protobuf.BoolValue
	24, // 15: spire.api.server.agent.v1.CountAgentsRequest.Filter.by_can_reattest:type_name -> google.protobuf.BoolValue
	23, // 16: spire.api.server.agent.v1.ListAgentsRequest.Filter.by_selector_match:type_name -> spire.api.types.SelectorMatch
	24, // 17: spire.api.server.agent.v1.ListAgentsRequest.Filter.by_banned:type_name -> google.protobuf.BoolValue
	24, // 18: spire.api.server.agent.v1.ListAgentsRequest.Filter.by_can_reattest:type_name -> google.protobuf.BoolValue
	25, // 19: spire.api.server.agent.v1.AttestAgentRequest.Params.data:type_name -> spire.api.types.AttestationData
	12, // 20: spire.api.server.agent.v1.AttestAgentRequest.Params.params:type_name -> spire.api.server.agent.v1.AgentX509SVIDParams
	22, // 21: spire.api.server.agent.v1.AttestAgentResponse.Result.svid:type_name -> spire.api.types.X509SVID
	0,  // 22: spire.api.server.agent.v1.Agent.CountAgents:input_type -> spire.api.server.agent.v1.CountAgentsRequest
	2,  // 23: spire.api.server.agent.v1.Agent.ListAgents:input_type -> spire.api.server.agent.v1.ListAgentsRequest
	4,  // 24: spire.api.server.agent.v1.Agent.GetAgent:input_type -> spire.api.server.agent.v1.GetAgentRequest
	5,  // 25: spire.api.server.agent.v1.Agent.DeleteAgent:input_type -> spire.api.server.agent.v1.DeleteAgentRequest
	6,  // 26: spire.api.server.agent.v1.Agent.BanAgent:input_type -> spire.api.server.agent.v1.BanAgentRequest
	7,  // 27: spire.api.server.agent.v1.Agent.AttestAgent:input_type -> spire.api.server.agent.v1.AttestAgentRequest
	9,  // 28: spire.api.server.agent.v1.Agent.RenewAgent:input_type -> spire.api.server.agent.v1.RenewAgentRequest
	11, // 29: spire.api.server.agent.v1.Agent.CreateJoinToken:input_type -> spire.api.server.agent.v1.CreateJoinTokenRequest
	13, // 30: spire.api.server.agent.v1.Agent.PostStatus:input_type -> spire.api.server.agent.v1.PostStatusRequest
	1,  // 31: spire.api.server.agent.v1.Agent.CountAgents:output_type -> spire.api.server.agent.v1.CountAgentsResponse
	3,  // 32: spire.api.server.agent.v1.Agent.ListAgents:output_type -> spire.api.server.agent.v1.ListAgentsResponse
	20, // 33: spire.api.server.agent.v1.Agent.GetAgent:output_type -> spire.api.types.Agent
	26, // 34: spire.api.server.agent.v1.Agent.DeleteAgent:output_type -> google.protobuf.Empty
	26, // 35: spire.api.server.agent.v1.Agent.BanAgent:output_type -> google.protobuf.Empty
	8,  // 36: spire.api.server.agent.v1.Agent.AttestAgent:output_type -> spire.api.server.agent.v1.AttestAgentResponse
	10, // 37: spire.api.server.agent.v1.Agent.RenewAgent:output_type -> spire.api.server.agent.v1.RenewAgentResponse
	27, // 38: spire.api.server.agent.v1.Agent.CreateJoinToken:output_type -> spire.api.types.JoinToken
	14, // 39: spire.api.server.agent.v1.Agent.PostStatus:output_type -> spire.api.server.agent.v1.PostStatusResponse
	31, // [31:40] is the sub-list for method output_type
	22, // [22:31] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_spire_api_server_agent_v1_agent_proto_init() }
func file_spire_api_server_agent_v1_agent_proto_init() {
	if File_spire_api_server_agent_v1_agent_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spire_api_server_agent_v1_agent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAgentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_agent_v1_agent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAgentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_agent_v1_agent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAgentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_agent_v1_agent_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAgentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_agent_v1_agent_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_agent_v1_agent_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_agent_v1_agent_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_agent_v1_agent_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_agent_v1_agent_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_agent_v1_agent_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenewAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_agent_v1_agent_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenewAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_agent_v1_agent_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateJoinTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_agent_v1_agent_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentX509SVIDParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_agent_v1_agent_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_agent_v1_agent_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_agent_v1_agent_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAgentsRequest_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_agent_v1_agent_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAgentsRequest_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_agent_v1_agent_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestAgentRequest_Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_agent_v1_agent_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestAgentResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_spire_api_server_agent_v1_agent_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*AttestAgentRequest_Params_)(nil),
		(*AttestAgentRequest_ChallengeResponse)(nil),
	}
	file_spire_api_server_agent_v1_agent_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*AttestAgentResponse_Result_)(nil),
		(*AttestAgentResponse_Challenge)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spire_api_server_agent_v1_agent_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spire_api_server_agent_v1_agent_proto_goTypes,
		DependencyIndexes: file_spire_api_server_agent_v1_agent_proto_depIdxs,
		MessageInfos:      file_spire_api_server_agent_v1_agent_proto_msgTypes,
	}.Build()
	File_spire_api_server_agent_v1_agent_proto = out.File
	file_spire_api_server_agent_v1_agent_proto_rawDesc = nil
	file_spire_api_server_agent_v1_agent_proto_goTypes = nil
	file_spire_api_server_agent_v1_agent_proto_depIdxs = nil
}
