syntax = "proto3";
package spire.api.server.local_authority.v1;
option go_package = "github.com/spiffe/spire-api-sdk/proto/spire/api/server/local_authority/v1;local_authorityv1";

// The LocalAuthority service provides a way to manage the signing keys (and
// related material) of the SPIRE Server exposing it.
service LocalAuthority {
        // GetJWTAuthorityState returns the state of all locally configured
        // JWT authorities.
        rpc GetJWTAuthorityState(GetJWTAuthorityStateRequest) returns (GetJWTAuthorityStateResponse);

        // PrepareJWTAuthority prepares a new JWT authority for use by
        // generating a new key and injecting it into the bundle. This action
        // will propagate the new public key cluster-wide.
        rpc PrepareJWTAuthority(PrepareJWTAuthorityRequest) returns (PrepareJWTAuthorityResponse);

        // ActivateJWTAuthority activates a prepared JWT authority for use,
        // which will cause it to be used for all JWT signing operations
        // serviced by this server going forward. If a new JWT authority has
        // not already been prepared, a FailedPrecondition error will be returned.
        rpc ActivateJWTAuthority(ActivateJWTAuthorityRequest) returns (ActivateJWTAuthorityResponse);

        // TaintJWTAuthority marks the previously active JWT authority as
        // being tainted. SPIRE Agents observing an authority to be tainted
        // will perform proactive rotations of any key material related to
        // the tainted authority. The result of this action will be observed
        // cluster-wide.
        //
        // If a previously active JWT authority does not exist (e.g. if one
        // has been prepared but not activated yet), a FailedPrecondition
        // error will be returned.
        rpc TaintJWTAuthority(TaintJWTAuthorityRequest) returns (TaintJWTAuthorityResponse);

        // RevokeJWTAuthority revokes the previously active JWT authority by
        // removing it from the bundle and propagating this update throughout
        // the cluster.
        //
        // If a previously active JWT authority does not exist (e.g. if one
        // has been prepared but not activated yet), a FailedPrecondition
        // error will be returned.
        rpc RevokeJWTAuthority(RevokeJWTAuthorityRequest) returns (RevokeJWTAuthorityResponse);

        // GetX509AuthorityState returns the state of all locally configured
        // X.509 authorities.
        rpc GetX509AuthorityState(GetX509AuthorityStateRequest) returns (GetX509AuthorityStateResponse);

        // PrepareX509Authority prepares a new X.509 authority for use by
        // generating a new key and injecting the resulting CA certificate into
        // the bundle. This action will  propagate the new CA cluster-wide.
        rpc PrepareX509Authority(PrepareX509AuthorityRequest) returns (PrepareX509AuthorityResponse);

        
        // ActivateX509Authority activates a prepared X.509 authority for use,
        // which will cause it to be used for all X.509 signing operations
        // serviced by this server going forward. If a new X.509 authority has
        // not already been prepared, a FailedPrecondition error will be returned.
        rpc ActivateX509Authority(ActivateX509AuthorityRequest) returns (ActivateX509AuthorityResponse);

        // TaintX509Authority marks the previously active X.509 authority as
        // being tainted. SPIRE Agents observing an authority to be tainted
        // will perform proactive rotations of any key material related to
        // the tainted authority. The result of this action will be observed
        // cluster-wide.
        //
        // If a previously active X.509 authority does not exist (e.g. if one
        // has been prepared but not activated yet), a FailedPrecondition
        // error will be returned.
        rpc TaintX509Authority(TaintX509AuthorityRequest) returns (TaintX509AuthorityResponse);

        // RevokeX509Authority revokes the previously active X.509 authority by
        // removing it from the bundle and propagating this update throughout
        // the cluster.
        //
        // If a previously active X.509 authority does not exist (e.g. if one
        // has been prepared but not activated yet), a FailedPrecondition
        // error will be returned.
        rpc RevokeX509Authority(RevokeX509AuthorityRequest) returns (RevokeX509AuthorityResponse);
}

message GetJWTAuthorityStateRequest {}

message GetJWTAuthorityStateResponse {
        repeated AuthorityState states = 1;
}

message PrepareJWTAuthorityRequest {}

message PrepareJWTAuthorityResponse {
        AuthorityState prepared_authority = 1;
}

message ActivateJWTAuthorityRequest {}

message ActivateJWTAuthorityResponse {
        AuthorityState activated_authority = 1;
}

message TaintJWTAuthorityRequest {}

message TaintJWTAuthorityResponse {
        AuthorityState tainted_authority = 1;
}

message RevokeJWTAuthorityRequest {}

message RevokeJWTAuthorityResponse {
        AuthorityState revoked_authority = 1;
}

message GetX509AuthorityStateRequest {}

message GetX509AuthorityStateResponse {
        repeated AuthorityState states = 1;
}

message PrepareX509AuthorityRequest {}

message PrepareX509AuthorityResponse {
        AuthorityState prepared_authority = 1;
}

message ActivateX509AuthorityRequest {}

message ActivateX509AuthorityResponse {
        AuthorityState activated_authority = 1;
}

message TaintX509AuthorityRequest {}

message TaintX509AuthorityResponse {
        AuthorityState tainted_authority = 1;
}

message RevokeX509AuthorityRequest {}

message RevokeX509AuthorityResponse {
        AuthorityState revoked_authority = 1;
}

message AuthorityState {
        // An opaque name for the "slot" that this authority is housed in
        string slot = 1;

        // The authority's public key, PKIX encoded
        bytes public_key = 2;

        enum Status {
                // Key status is unknown. This is an error condition and should
                // never really be encountered.
                UNKNOWN = 0;

                // This slot is empty. To fill it, prepare a new authority.
                EMPTY = 1;

                // This is a new authority that has been added to the bundle
                // but is not yet in use.
                PREPARED = 2;

                // This authority is active and is currently being used for
                // signing operations.
                ACTIVE = 3;

                // This is an old authority that was previously in use but is
                // no longer.
                OLD = 4;

                // This is an old authority that was previously in use but is
                // now expired.
                EXPIRED = 5;
        }

        // The status of this authority
        Status status = 3;
}
