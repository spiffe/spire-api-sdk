// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v6.30.2
// source: spire/api/server/bundle/v1/bundle.proto

package bundlev1

import (
	types "github.com/spiffe/spire-api-sdk/proto/spire/api/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Mode controls the delete behavior if there are other records
// associated with the bundle (e.g. registration entries).
type BatchDeleteFederatedBundleRequest_Mode int32

const (
	// RESTRICT prevents the bundle from being deleted in the presence of associated entries
	BatchDeleteFederatedBundleRequest_RESTRICT BatchDeleteFederatedBundleRequest_Mode = 0
	// DELETE deletes the bundle and associated entries
	BatchDeleteFederatedBundleRequest_DELETE BatchDeleteFederatedBundleRequest_Mode = 1
	// DISSOCIATE deletes the bundle and dissociates associated entries
	BatchDeleteFederatedBundleRequest_DISSOCIATE BatchDeleteFederatedBundleRequest_Mode = 2
)

// Enum value maps for BatchDeleteFederatedBundleRequest_Mode.
var (
	BatchDeleteFederatedBundleRequest_Mode_name = map[int32]string{
		0: "RESTRICT",
		1: "DELETE",
		2: "DISSOCIATE",
	}
	BatchDeleteFederatedBundleRequest_Mode_value = map[string]int32{
		"RESTRICT":   0,
		"DELETE":     1,
		"DISSOCIATE": 2,
	}
)

func (x BatchDeleteFederatedBundleRequest_Mode) Enum() *BatchDeleteFederatedBundleRequest_Mode {
	p := new(BatchDeleteFederatedBundleRequest_Mode)
	*p = x
	return p
}

func (x BatchDeleteFederatedBundleRequest_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatchDeleteFederatedBundleRequest_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_spire_api_server_bundle_v1_bundle_proto_enumTypes[0].Descriptor()
}

func (BatchDeleteFederatedBundleRequest_Mode) Type() protoreflect.EnumType {
	return &file_spire_api_server_bundle_v1_bundle_proto_enumTypes[0]
}

func (x BatchDeleteFederatedBundleRequest_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatchDeleteFederatedBundleRequest_Mode.Descriptor instead.
func (BatchDeleteFederatedBundleRequest_Mode) EnumDescriptor() ([]byte, []int) {
	return file_spire_api_server_bundle_v1_bundle_proto_rawDescGZIP(), []int{15, 0}
}

type CountBundlesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CountBundlesRequest) Reset() {
	*x = CountBundlesRequest{}
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountBundlesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountBundlesRequest) ProtoMessage() {}

func (x *CountBundlesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountBundlesRequest.ProtoReflect.Descriptor instead.
func (*CountBundlesRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_bundle_v1_bundle_proto_rawDescGZIP(), []int{0}
}

type CountBundlesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The total number of bundles, including the server bundle.
	Count         int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CountBundlesResponse) Reset() {
	*x = CountBundlesResponse{}
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountBundlesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountBundlesResponse) ProtoMessage() {}

func (x *CountBundlesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountBundlesResponse.ProtoReflect.Descriptor instead.
func (*CountBundlesResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_bundle_v1_bundle_proto_rawDescGZIP(), []int{1}
}

func (x *CountBundlesResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetBundleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An output mask indicating which bundle fields are set in the response.
	OutputMask    *types.BundleMask `protobuf:"bytes,1,opt,name=output_mask,json=outputMask,proto3" json:"output_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBundleRequest) Reset() {
	*x = GetBundleRequest{}
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBundleRequest) ProtoMessage() {}

func (x *GetBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBundleRequest.ProtoReflect.Descriptor instead.
func (*GetBundleRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_bundle_v1_bundle_proto_rawDescGZIP(), []int{2}
}

func (x *GetBundleRequest) GetOutputMask() *types.BundleMask {
	if x != nil {
		return x.OutputMask
	}
	return nil
}

type AppendBundleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// X.509 authorities to append.
	X509Authorities []*types.X509Certificate `protobuf:"bytes,1,rep,name=x509_authorities,json=x509Authorities,proto3" json:"x509_authorities,omitempty"`
	// JWT authorities to append.
	JwtAuthorities []*types.JWTKey `protobuf:"bytes,2,rep,name=jwt_authorities,json=jwtAuthorities,proto3" json:"jwt_authorities,omitempty"`
	// An output mask indicating which bundle fields are set in the response.
	OutputMask    *types.BundleMask `protobuf:"bytes,3,opt,name=output_mask,json=outputMask,proto3" json:"output_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppendBundleRequest) Reset() {
	*x = AppendBundleRequest{}
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppendBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendBundleRequest) ProtoMessage() {}

func (x *AppendBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendBundleRequest.ProtoReflect.Descriptor instead.
func (*AppendBundleRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_bundle_v1_bundle_proto_rawDescGZIP(), []int{3}
}

func (x *AppendBundleRequest) GetX509Authorities() []*types.X509Certificate {
	if x != nil {
		return x.X509Authorities
	}
	return nil
}

func (x *AppendBundleRequest) GetJwtAuthorities() []*types.JWTKey {
	if x != nil {
		return x.JwtAuthorities
	}
	return nil
}

func (x *AppendBundleRequest) GetOutputMask() *types.BundleMask {
	if x != nil {
		return x.OutputMask
	}
	return nil
}

type PublishJWTAuthorityRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The JWT authority to publish.
	JwtAuthority  *types.JWTKey `protobuf:"bytes,1,opt,name=jwt_authority,json=jwtAuthority,proto3" json:"jwt_authority,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishJWTAuthorityRequest) Reset() {
	*x = PublishJWTAuthorityRequest{}
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishJWTAuthorityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishJWTAuthorityRequest) ProtoMessage() {}

func (x *PublishJWTAuthorityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishJWTAuthorityRequest.ProtoReflect.Descriptor instead.
func (*PublishJWTAuthorityRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_bundle_v1_bundle_proto_rawDescGZIP(), []int{4}
}

func (x *PublishJWTAuthorityRequest) GetJwtAuthority() *types.JWTKey {
	if x != nil {
		return x.JwtAuthority
	}
	return nil
}

type PublishJWTAuthorityResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The JWT authorities for the trust domain.
	JwtAuthorities []*types.JWTKey `protobuf:"bytes,1,rep,name=jwt_authorities,json=jwtAuthorities,proto3" json:"jwt_authorities,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PublishJWTAuthorityResponse) Reset() {
	*x = PublishJWTAuthorityResponse{}
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishJWTAuthorityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishJWTAuthorityResponse) ProtoMessage() {}

func (x *PublishJWTAuthorityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishJWTAuthorityResponse.ProtoReflect.Descriptor instead.
func (*PublishJWTAuthorityResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_bundle_v1_bundle_proto_rawDescGZIP(), []int{5}
}

func (x *PublishJWTAuthorityResponse) GetJwtAuthorities() []*types.JWTKey {
	if x != nil {
		return x.JwtAuthorities
	}
	return nil
}

type ListFederatedBundlesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An output mask indicating which bundle fields are set in the response.
	OutputMask *types.BundleMask `protobuf:"bytes,1,opt,name=output_mask,json=outputMask,proto3" json:"output_mask,omitempty"`
	// The maximum number of results to return. The server may further
	// constrain this value, or if zero, choose its own.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The next_page_token value returned from a previous request, if any.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFederatedBundlesRequest) Reset() {
	*x = ListFederatedBundlesRequest{}
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFederatedBundlesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFederatedBundlesRequest) ProtoMessage() {}

func (x *ListFederatedBundlesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFederatedBundlesRequest.ProtoReflect.Descriptor instead.
func (*ListFederatedBundlesRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_bundle_v1_bundle_proto_rawDescGZIP(), []int{6}
}

func (x *ListFederatedBundlesRequest) GetOutputMask() *types.BundleMask {
	if x != nil {
		return x.OutputMask
	}
	return nil
}

func (x *ListFederatedBundlesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListFederatedBundlesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListFederatedBundlesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The bundles.
	Bundles []*types.Bundle `protobuf:"bytes,1,rep,name=bundles,proto3" json:"bundles,omitempty"`
	// The page token for the next request. Empty if there are no more results.
	// This field should be checked by clients even when a page_size was not
	// requested, since the server may choose its own (see page_size).
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFederatedBundlesResponse) Reset() {
	*x = ListFederatedBundlesResponse{}
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFederatedBundlesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFederatedBundlesResponse) ProtoMessage() {}

func (x *ListFederatedBundlesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFederatedBundlesResponse.ProtoReflect.Descriptor instead.
func (*ListFederatedBundlesResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_bundle_v1_bundle_proto_rawDescGZIP(), []int{7}
}

func (x *ListFederatedBundlesResponse) GetBundles() []*types.Bundle {
	if x != nil {
		return x.Bundles
	}
	return nil
}

func (x *ListFederatedBundlesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetFederatedBundleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The trust domain name of the bundle (e.g., "example.org").
	TrustDomain string `protobuf:"bytes,1,opt,name=trust_domain,json=trustDomain,proto3" json:"trust_domain,omitempty"`
	// An output mask indicating which bundle fields are set in the response.
	OutputMask    *types.BundleMask `protobuf:"bytes,2,opt,name=output_mask,json=outputMask,proto3" json:"output_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFederatedBundleRequest) Reset() {
	*x = GetFederatedBundleRequest{}
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFederatedBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFederatedBundleRequest) ProtoMessage() {}

func (x *GetFederatedBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFederatedBundleRequest.ProtoReflect.Descriptor instead.
func (*GetFederatedBundleRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_bundle_v1_bundle_proto_rawDescGZIP(), []int{8}
}

func (x *GetFederatedBundleRequest) GetTrustDomain() string {
	if x != nil {
		return x.TrustDomain
	}
	return ""
}

func (x *GetFederatedBundleRequest) GetOutputMask() *types.BundleMask {
	if x != nil {
		return x.OutputMask
	}
	return nil
}

type BatchCreateFederatedBundleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The bundles to be created.
	Bundle []*types.Bundle `protobuf:"bytes,1,rep,name=bundle,proto3" json:"bundle,omitempty"`
	// An output mask indicating which bundle fields are set in the response.
	OutputMask    *types.BundleMask `protobuf:"bytes,2,opt,name=output_mask,json=outputMask,proto3" json:"output_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchCreateFederatedBundleRequest) Reset() {
	*x = BatchCreateFederatedBundleRequest{}
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchCreateFederatedBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateFederatedBundleRequest) ProtoMessage() {}

func (x *BatchCreateFederatedBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateFederatedBundleRequest.ProtoReflect.Descriptor instead.
func (*BatchCreateFederatedBundleRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_bundle_v1_bundle_proto_rawDescGZIP(), []int{9}
}

func (x *BatchCreateFederatedBundleRequest) GetBundle() []*types.Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

func (x *BatchCreateFederatedBundleRequest) GetOutputMask() *types.BundleMask {
	if x != nil {
		return x.OutputMask
	}
	return nil
}

type BatchCreateFederatedBundleResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Result for each bundle in the request (order is maintained).
	Results       []*BatchCreateFederatedBundleResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchCreateFederatedBundleResponse) Reset() {
	*x = BatchCreateFederatedBundleResponse{}
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchCreateFederatedBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateFederatedBundleResponse) ProtoMessage() {}

func (x *BatchCreateFederatedBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateFederatedBundleResponse.ProtoReflect.Descriptor instead.
func (*BatchCreateFederatedBundleResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_bundle_v1_bundle_proto_rawDescGZIP(), []int{10}
}

func (x *BatchCreateFederatedBundleResponse) GetResults() []*BatchCreateFederatedBundleResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type BatchUpdateFederatedBundleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The bundles to be updated.
	Bundle []*types.Bundle `protobuf:"bytes,1,rep,name=bundle,proto3" json:"bundle,omitempty"`
	// An input mask indicating which bundle fields should be updated.
	InputMask *types.BundleMask `protobuf:"bytes,2,opt,name=input_mask,json=inputMask,proto3" json:"input_mask,omitempty"`
	// An output mask indicating which bundle fields are set in the response.
	OutputMask    *types.BundleMask `protobuf:"bytes,3,opt,name=output_mask,json=outputMask,proto3" json:"output_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchUpdateFederatedBundleRequest) Reset() {
	*x = BatchUpdateFederatedBundleRequest{}
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchUpdateFederatedBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateFederatedBundleRequest) ProtoMessage() {}

func (x *BatchUpdateFederatedBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateFederatedBundleRequest.ProtoReflect.Descriptor instead.
func (*BatchUpdateFederatedBundleRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_bundle_v1_bundle_proto_rawDescGZIP(), []int{11}
}

func (x *BatchUpdateFederatedBundleRequest) GetBundle() []*types.Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

func (x *BatchUpdateFederatedBundleRequest) GetInputMask() *types.BundleMask {
	if x != nil {
		return x.InputMask
	}
	return nil
}

func (x *BatchUpdateFederatedBundleRequest) GetOutputMask() *types.BundleMask {
	if x != nil {
		return x.OutputMask
	}
	return nil
}

type BatchUpdateFederatedBundleResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Result for each bundle in the request (order is maintained).
	Results       []*BatchUpdateFederatedBundleResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchUpdateFederatedBundleResponse) Reset() {
	*x = BatchUpdateFederatedBundleResponse{}
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchUpdateFederatedBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateFederatedBundleResponse) ProtoMessage() {}

func (x *BatchUpdateFederatedBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateFederatedBundleResponse.ProtoReflect.Descriptor instead.
func (*BatchUpdateFederatedBundleResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_bundle_v1_bundle_proto_rawDescGZIP(), []int{12}
}

func (x *BatchUpdateFederatedBundleResponse) GetResults() []*BatchUpdateFederatedBundleResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type BatchSetFederatedBundleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The bundles to be upserted.
	Bundle []*types.Bundle `protobuf:"bytes,1,rep,name=bundle,proto3" json:"bundle,omitempty"`
	// An output mask indicating which bundle fields are set in the response.
	OutputMask    *types.BundleMask `protobuf:"bytes,2,opt,name=output_mask,json=outputMask,proto3" json:"output_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchSetFederatedBundleRequest) Reset() {
	*x = BatchSetFederatedBundleRequest{}
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchSetFederatedBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSetFederatedBundleRequest) ProtoMessage() {}

func (x *BatchSetFederatedBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSetFederatedBundleRequest.ProtoReflect.Descriptor instead.
func (*BatchSetFederatedBundleRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_bundle_v1_bundle_proto_rawDescGZIP(), []int{13}
}

func (x *BatchSetFederatedBundleRequest) GetBundle() []*types.Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

func (x *BatchSetFederatedBundleRequest) GetOutputMask() *types.BundleMask {
	if x != nil {
		return x.OutputMask
	}
	return nil
}

type BatchSetFederatedBundleResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Result for each bundle in the request (order is maintained).
	Results       []*BatchSetFederatedBundleResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchSetFederatedBundleResponse) Reset() {
	*x = BatchSetFederatedBundleResponse{}
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchSetFederatedBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSetFederatedBundleResponse) ProtoMessage() {}

func (x *BatchSetFederatedBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSetFederatedBundleResponse.ProtoReflect.Descriptor instead.
func (*BatchSetFederatedBundleResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_bundle_v1_bundle_proto_rawDescGZIP(), []int{14}
}

func (x *BatchSetFederatedBundleResponse) GetResults() []*BatchSetFederatedBundleResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type BatchDeleteFederatedBundleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The trust domain names (e.g., "example.org") of the bundles to delete.
	TrustDomains []string `protobuf:"bytes,1,rep,name=trust_domains,json=trustDomains,proto3" json:"trust_domains,omitempty"`
	// The deletion mode selected
	Mode          BatchDeleteFederatedBundleRequest_Mode `protobuf:"varint,2,opt,name=mode,proto3,enum=spire.api.server.bundle.v1.BatchDeleteFederatedBundleRequest_Mode" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchDeleteFederatedBundleRequest) Reset() {
	*x = BatchDeleteFederatedBundleRequest{}
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchDeleteFederatedBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteFederatedBundleRequest) ProtoMessage() {}

func (x *BatchDeleteFederatedBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteFederatedBundleRequest.ProtoReflect.Descriptor instead.
func (*BatchDeleteFederatedBundleRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_bundle_v1_bundle_proto_rawDescGZIP(), []int{15}
}

func (x *BatchDeleteFederatedBundleRequest) GetTrustDomains() []string {
	if x != nil {
		return x.TrustDomains
	}
	return nil
}

func (x *BatchDeleteFederatedBundleRequest) GetMode() BatchDeleteFederatedBundleRequest_Mode {
	if x != nil {
		return x.Mode
	}
	return BatchDeleteFederatedBundleRequest_RESTRICT
}

type BatchDeleteFederatedBundleResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Result for each trust domain name in the request (order is maintained).
	Results       []*BatchDeleteFederatedBundleResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchDeleteFederatedBundleResponse) Reset() {
	*x = BatchDeleteFederatedBundleResponse{}
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchDeleteFederatedBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteFederatedBundleResponse) ProtoMessage() {}

func (x *BatchDeleteFederatedBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteFederatedBundleResponse.ProtoReflect.Descriptor instead.
func (*BatchDeleteFederatedBundleResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_bundle_v1_bundle_proto_rawDescGZIP(), []int{16}
}

func (x *BatchDeleteFederatedBundleResponse) GetResults() []*BatchDeleteFederatedBundleResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type BatchCreateFederatedBundleResponse_Result struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The status of creating the bundle.
	Status *types.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The bundle that was created. This will be set if the status is OK.
	Bundle        *types.Bundle `protobuf:"bytes,2,opt,name=bundle,proto3" json:"bundle,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchCreateFederatedBundleResponse_Result) Reset() {
	*x = BatchCreateFederatedBundleResponse_Result{}
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchCreateFederatedBundleResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateFederatedBundleResponse_Result) ProtoMessage() {}

func (x *BatchCreateFederatedBundleResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateFederatedBundleResponse_Result.ProtoReflect.Descriptor instead.
func (*BatchCreateFederatedBundleResponse_Result) Descriptor() ([]byte, []int) {
	return file_spire_api_server_bundle_v1_bundle_proto_rawDescGZIP(), []int{10, 0}
}

func (x *BatchCreateFederatedBundleResponse_Result) GetStatus() *types.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BatchCreateFederatedBundleResponse_Result) GetBundle() *types.Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

type BatchUpdateFederatedBundleResponse_Result struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The status of updating the bundle.
	Status *types.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The bundle that was updated. This will be set if the status is OK.
	Bundle        *types.Bundle `protobuf:"bytes,2,opt,name=bundle,proto3" json:"bundle,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchUpdateFederatedBundleResponse_Result) Reset() {
	*x = BatchUpdateFederatedBundleResponse_Result{}
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchUpdateFederatedBundleResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateFederatedBundleResponse_Result) ProtoMessage() {}

func (x *BatchUpdateFederatedBundleResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateFederatedBundleResponse_Result.ProtoReflect.Descriptor instead.
func (*BatchUpdateFederatedBundleResponse_Result) Descriptor() ([]byte, []int) {
	return file_spire_api_server_bundle_v1_bundle_proto_rawDescGZIP(), []int{12, 0}
}

func (x *BatchUpdateFederatedBundleResponse_Result) GetStatus() *types.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BatchUpdateFederatedBundleResponse_Result) GetBundle() *types.Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

type BatchSetFederatedBundleResponse_Result struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The status of upserting the bundle.
	Status *types.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The bundle that was upserted. This will be set if the status is OK.
	Bundle        *types.Bundle `protobuf:"bytes,2,opt,name=bundle,proto3" json:"bundle,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchSetFederatedBundleResponse_Result) Reset() {
	*x = BatchSetFederatedBundleResponse_Result{}
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchSetFederatedBundleResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSetFederatedBundleResponse_Result) ProtoMessage() {}

func (x *BatchSetFederatedBundleResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSetFederatedBundleResponse_Result.ProtoReflect.Descriptor instead.
func (*BatchSetFederatedBundleResponse_Result) Descriptor() ([]byte, []int) {
	return file_spire_api_server_bundle_v1_bundle_proto_rawDescGZIP(), []int{14, 0}
}

func (x *BatchSetFederatedBundleResponse_Result) GetStatus() *types.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BatchSetFederatedBundleResponse_Result) GetBundle() *types.Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

type BatchDeleteFederatedBundleResponse_Result struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The status of deleting the bundle.
	Status *types.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The trust domain name (e.g., "example.org") of the bundle that was
	// deleted.
	TrustDomain   string `protobuf:"bytes,2,opt,name=trust_domain,json=trustDomain,proto3" json:"trust_domain,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchDeleteFederatedBundleResponse_Result) Reset() {
	*x = BatchDeleteFederatedBundleResponse_Result{}
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchDeleteFederatedBundleResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteFederatedBundleResponse_Result) ProtoMessage() {}

func (x *BatchDeleteFederatedBundleResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_bundle_v1_bundle_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteFederatedBundleResponse_Result.ProtoReflect.Descriptor instead.
func (*BatchDeleteFederatedBundleResponse_Result) Descriptor() ([]byte, []int) {
	return file_spire_api_server_bundle_v1_bundle_proto_rawDescGZIP(), []int{16, 0}
}

func (x *BatchDeleteFederatedBundleResponse_Result) GetStatus() *types.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BatchDeleteFederatedBundleResponse_Result) GetTrustDomain() string {
	if x != nil {
		return x.TrustDomain
	}
	return ""
}

var File_spire_api_server_bundle_v1_bundle_proto protoreflect.FileDescriptor

const file_spire_api_server_bundle_v1_bundle_proto_rawDesc = "" +
	"\n" +
	"'spire/api/server/bundle/v1/bundle.proto\x12\x1aspire.api.server.bundle.v1\x1a\x1cspire/api/types/bundle.proto\x1a\x1cspire/api/types/status.proto\"\x15\n" +
	"\x13CountBundlesRequest\",\n" +
	"\x14CountBundlesResponse\x12\x14\n" +
	"\x05count\x18\x01 \x01(\x05R\x05count\"P\n" +
	"\x10GetBundleRequest\x12<\n" +
	"\voutput_mask\x18\x01 \x01(\v2\x1b.spire.api.types.BundleMaskR\n" +
	"outputMask\"\xe2\x01\n" +
	"\x13AppendBundleRequest\x12K\n" +
	"\x10x509_authorities\x18\x01 \x03(\v2 .spire.api.types.X509CertificateR\x0fx509Authorities\x12@\n" +
	"\x0fjwt_authorities\x18\x02 \x03(\v2\x17.spire.api.types.JWTKeyR\x0ejwtAuthorities\x12<\n" +
	"\voutput_mask\x18\x03 \x01(\v2\x1b.spire.api.types.BundleMaskR\n" +
	"outputMask\"Z\n" +
	"\x1aPublishJWTAuthorityRequest\x12<\n" +
	"\rjwt_authority\x18\x01 \x01(\v2\x17.spire.api.types.JWTKeyR\fjwtAuthority\"_\n" +
	"\x1bPublishJWTAuthorityResponse\x12@\n" +
	"\x0fjwt_authorities\x18\x01 \x03(\v2\x17.spire.api.types.JWTKeyR\x0ejwtAuthorities\"\x97\x01\n" +
	"\x1bListFederatedBundlesRequest\x12<\n" +
	"\voutput_mask\x18\x01 \x01(\v2\x1b.spire.api.types.BundleMaskR\n" +
	"outputMask\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\"y\n" +
	"\x1cListFederatedBundlesResponse\x121\n" +
	"\abundles\x18\x01 \x03(\v2\x17.spire.api.types.BundleR\abundles\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"|\n" +
	"\x19GetFederatedBundleRequest\x12!\n" +
	"\ftrust_domain\x18\x01 \x01(\tR\vtrustDomain\x12<\n" +
	"\voutput_mask\x18\x02 \x01(\v2\x1b.spire.api.types.BundleMaskR\n" +
	"outputMask\"\x92\x01\n" +
	"!BatchCreateFederatedBundleRequest\x12/\n" +
	"\x06bundle\x18\x01 \x03(\v2\x17.spire.api.types.BundleR\x06bundle\x12<\n" +
	"\voutput_mask\x18\x02 \x01(\v2\x1b.spire.api.types.BundleMaskR\n" +
	"outputMask\"\xf1\x01\n" +
	"\"BatchCreateFederatedBundleResponse\x12_\n" +
	"\aresults\x18\x01 \x03(\v2E.spire.api.server.bundle.v1.BatchCreateFederatedBundleResponse.ResultR\aresults\x1aj\n" +
	"\x06Result\x12/\n" +
	"\x06status\x18\x01 \x01(\v2\x17.spire.api.types.StatusR\x06status\x12/\n" +
	"\x06bundle\x18\x02 \x01(\v2\x17.spire.api.types.BundleR\x06bundle\"\xce\x01\n" +
	"!BatchUpdateFederatedBundleRequest\x12/\n" +
	"\x06bundle\x18\x01 \x03(\v2\x17.spire.api.types.BundleR\x06bundle\x12:\n" +
	"\n" +
	"input_mask\x18\x02 \x01(\v2\x1b.spire.api.types.BundleMaskR\tinputMask\x12<\n" +
	"\voutput_mask\x18\x03 \x01(\v2\x1b.spire.api.types.BundleMaskR\n" +
	"outputMask\"\xf1\x01\n" +
	"\"BatchUpdateFederatedBundleResponse\x12_\n" +
	"\aresults\x18\x01 \x03(\v2E.spire.api.server.bundle.v1.BatchUpdateFederatedBundleResponse.ResultR\aresults\x1aj\n" +
	"\x06Result\x12/\n" +
	"\x06status\x18\x01 \x01(\v2\x17.spire.api.types.StatusR\x06status\x12/\n" +
	"\x06bundle\x18\x02 \x01(\v2\x17.spire.api.types.BundleR\x06bundle\"\x8f\x01\n" +
	"\x1eBatchSetFederatedBundleRequest\x12/\n" +
	"\x06bundle\x18\x01 \x03(\v2\x17.spire.api.types.BundleR\x06bundle\x12<\n" +
	"\voutput_mask\x18\x02 \x01(\v2\x1b.spire.api.types.BundleMaskR\n" +
	"outputMask\"\xeb\x01\n" +
	"\x1fBatchSetFederatedBundleResponse\x12\\\n" +
	"\aresults\x18\x01 \x03(\v2B.spire.api.server.bundle.v1.BatchSetFederatedBundleResponse.ResultR\aresults\x1aj\n" +
	"\x06Result\x12/\n" +
	"\x06status\x18\x01 \x01(\v2\x17.spire.api.types.StatusR\x06status\x12/\n" +
	"\x06bundle\x18\x02 \x01(\v2\x17.spire.api.types.BundleR\x06bundle\"\xd2\x01\n" +
	"!BatchDeleteFederatedBundleRequest\x12#\n" +
	"\rtrust_domains\x18\x01 \x03(\tR\ftrustDomains\x12V\n" +
	"\x04mode\x18\x02 \x01(\x0e2B.spire.api.server.bundle.v1.BatchDeleteFederatedBundleRequest.ModeR\x04mode\"0\n" +
	"\x04Mode\x12\f\n" +
	"\bRESTRICT\x10\x00\x12\n" +
	"\n" +
	"\x06DELETE\x10\x01\x12\x0e\n" +
	"\n" +
	"DISSOCIATE\x10\x02\"\xe3\x01\n" +
	"\"BatchDeleteFederatedBundleResponse\x12_\n" +
	"\aresults\x18\x01 \x03(\v2E.spire.api.server.bundle.v1.BatchDeleteFederatedBundleResponse.ResultR\aresults\x1a\\\n" +
	"\x06Result\x12/\n" +
	"\x06status\x18\x01 \x01(\v2\x17.spire.api.types.StatusR\x06status\x12!\n" +
	"\ftrust_domain\x18\x02 \x01(\tR\vtrustDomain2\x93\n" +
	"\n" +
	"\x06Bundle\x12q\n" +
	"\fCountBundles\x12/.spire.api.server.bundle.v1.CountBundlesRequest\x1a0.spire.api.server.bundle.v1.CountBundlesResponse\x12R\n" +
	"\tGetBundle\x12,.spire.api.server.bundle.v1.GetBundleRequest\x1a\x17.spire.api.types.Bundle\x12X\n" +
	"\fAppendBundle\x12/.spire.api.server.bundle.v1.AppendBundleRequest\x1a\x17.spire.api.types.Bundle\x12\x86\x01\n" +
	"\x13PublishJWTAuthority\x126.spire.api.server.bundle.v1.PublishJWTAuthorityRequest\x1a7.spire.api.server.bundle.v1.PublishJWTAuthorityResponse\x12\x89\x01\n" +
	"\x14ListFederatedBundles\x127.spire.api.server.bundle.v1.ListFederatedBundlesRequest\x1a8.spire.api.server.bundle.v1.ListFederatedBundlesResponse\x12d\n" +
	"\x12GetFederatedBundle\x125.spire.api.server.bundle.v1.GetFederatedBundleRequest\x1a\x17.spire.api.types.Bundle\x12\x9b\x01\n" +
	"\x1aBatchCreateFederatedBundle\x12=.spire.api.server.bundle.v1.BatchCreateFederatedBundleRequest\x1a>.spire.api.server.bundle.v1.BatchCreateFederatedBundleResponse\x12\x9b\x01\n" +
	"\x1aBatchUpdateFederatedBundle\x12=.spire.api.server.bundle.v1.BatchUpdateFederatedBundleRequest\x1a>.spire.api.server.bundle.v1.BatchUpdateFederatedBundleResponse\x12\x92\x01\n" +
	"\x17BatchSetFederatedBundle\x12:.spire.api.server.bundle.v1.BatchSetFederatedBundleRequest\x1a;.spire.api.server.bundle.v1.BatchSetFederatedBundleResponse\x12\x9b\x01\n" +
	"\x1aBatchDeleteFederatedBundle\x12=.spire.api.server.bundle.v1.BatchDeleteFederatedBundleRequest\x1a>.spire.api.server.bundle.v1.BatchDeleteFederatedBundleResponseBKZIgithub.com/spiffe/spire-api-sdk/proto/spire/api/server/bundle/v1;bundlev1b\x06proto3"

var (
	file_spire_api_server_bundle_v1_bundle_proto_rawDescOnce sync.Once
	file_spire_api_server_bundle_v1_bundle_proto_rawDescData []byte
)

func file_spire_api_server_bundle_v1_bundle_proto_rawDescGZIP() []byte {
	file_spire_api_server_bundle_v1_bundle_proto_rawDescOnce.Do(func() {
		file_spire_api_server_bundle_v1_bundle_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spire_api_server_bundle_v1_bundle_proto_rawDesc), len(file_spire_api_server_bundle_v1_bundle_proto_rawDesc)))
	})
	return file_spire_api_server_bundle_v1_bundle_proto_rawDescData
}

var file_spire_api_server_bundle_v1_bundle_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_spire_api_server_bundle_v1_bundle_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_spire_api_server_bundle_v1_bundle_proto_goTypes = []any{
	(BatchDeleteFederatedBundleRequest_Mode)(0),       // 0: spire.api.server.bundle.v1.BatchDeleteFederatedBundleRequest.Mode
	(*CountBundlesRequest)(nil),                       // 1: spire.api.server.bundle.v1.CountBundlesRequest
	(*CountBundlesResponse)(nil),                      // 2: spire.api.server.bundle.v1.CountBundlesResponse
	(*GetBundleRequest)(nil),                          // 3: spire.api.server.bundle.v1.GetBundleRequest
	(*AppendBundleRequest)(nil),                       // 4: spire.api.server.bundle.v1.AppendBundleRequest
	(*PublishJWTAuthorityRequest)(nil),                // 5: spire.api.server.bundle.v1.PublishJWTAuthorityRequest
	(*PublishJWTAuthorityResponse)(nil),               // 6: spire.api.server.bundle.v1.PublishJWTAuthorityResponse
	(*ListFederatedBundlesRequest)(nil),               // 7: spire.api.server.bundle.v1.ListFederatedBundlesRequest
	(*ListFederatedBundlesResponse)(nil),              // 8: spire.api.server.bundle.v1.ListFederatedBundlesResponse
	(*GetFederatedBundleRequest)(nil),                 // 9: spire.api.server.bundle.v1.GetFederatedBundleRequest
	(*BatchCreateFederatedBundleRequest)(nil),         // 10: spire.api.server.bundle.v1.BatchCreateFederatedBundleRequest
	(*BatchCreateFederatedBundleResponse)(nil),        // 11: spire.api.server.bundle.v1.BatchCreateFederatedBundleResponse
	(*BatchUpdateFederatedBundleRequest)(nil),         // 12: spire.api.server.bundle.v1.BatchUpdateFederatedBundleRequest
	(*BatchUpdateFederatedBundleResponse)(nil),        // 13: spire.api.server.bundle.v1.BatchUpdateFederatedBundleResponse
	(*BatchSetFederatedBundleRequest)(nil),            // 14: spire.api.server.bundle.v1.BatchSetFederatedBundleRequest
	(*BatchSetFederatedBundleResponse)(nil),           // 15: spire.api.server.bundle.v1.BatchSetFederatedBundleResponse
	(*BatchDeleteFederatedBundleRequest)(nil),         // 16: spire.api.server.bundle.v1.BatchDeleteFederatedBundleRequest
	(*BatchDeleteFederatedBundleResponse)(nil),        // 17: spire.api.server.bundle.v1.BatchDeleteFederatedBundleResponse
	(*BatchCreateFederatedBundleResponse_Result)(nil), // 18: spire.api.server.bundle.v1.BatchCreateFederatedBundleResponse.Result
	(*BatchUpdateFederatedBundleResponse_Result)(nil), // 19: spire.api.server.bundle.v1.BatchUpdateFederatedBundleResponse.Result
	(*BatchSetFederatedBundleResponse_Result)(nil),    // 20: spire.api.server.bundle.v1.BatchSetFederatedBundleResponse.Result
	(*BatchDeleteFederatedBundleResponse_Result)(nil), // 21: spire.api.server.bundle.v1.BatchDeleteFederatedBundleResponse.Result
	(*types.BundleMask)(nil),                          // 22: spire.api.types.BundleMask
	(*types.X509Certificate)(nil),                     // 23: spire.api.types.X509Certificate
	(*types.JWTKey)(nil),                              // 24: spire.api.types.JWTKey
	(*types.Bundle)(nil),                              // 25: spire.api.types.Bundle
	(*types.Status)(nil),                              // 26: spire.api.types.Status
}
var file_spire_api_server_bundle_v1_bundle_proto_depIdxs = []int32{
	22, // 0: spire.api.server.bundle.v1.GetBundleRequest.output_mask:type_name -> spire.api.types.BundleMask
	23, // 1: spire.api.server.bundle.v1.AppendBundleRequest.x509_authorities:type_name -> spire.api.types.X509Certificate
	24, // 2: spire.api.server.bundle.v1.AppendBundleRequest.jwt_authorities:type_name -> spire.api.types.JWTKey
	22, // 3: spire.api.server.bundle.v1.AppendBundleRequest.output_mask:type_name -> spire.api.types.BundleMask
	24, // 4: spire.api.server.bundle.v1.PublishJWTAuthorityRequest.jwt_authority:type_name -> spire.api.types.JWTKey
	24, // 5: spire.api.server.bundle.v1.PublishJWTAuthorityResponse.jwt_authorities:type_name -> spire.api.types.JWTKey
	22, // 6: spire.api.server.bundle.v1.ListFederatedBundlesRequest.output_mask:type_name -> spire.api.types.BundleMask
	25, // 7: spire.api.server.bundle.v1.ListFederatedBundlesResponse.bundles:type_name -> spire.api.types.Bundle
	22, // 8: spire.api.server.bundle.v1.GetFederatedBundleRequest.output_mask:type_name -> spire.api.types.BundleMask
	25, // 9: spire.api.server.bundle.v1.BatchCreateFederatedBundleRequest.bundle:type_name -> spire.api.types.Bundle
	22, // 10: spire.api.server.bundle.v1.BatchCreateFederatedBundleRequest.output_mask:type_name -> spire.api.types.BundleMask
	18, // 11: spire.api.server.bundle.v1.BatchCreateFederatedBundleResponse.results:type_name -> spire.api.server.bundle.v1.BatchCreateFederatedBundleResponse.Result
	25, // 12: spire.api.server.bundle.v1.BatchUpdateFederatedBundleRequest.bundle:type_name -> spire.api.types.Bundle
	22, // 13: spire.api.server.bundle.v1.BatchUpdateFederatedBundleRequest.input_mask:type_name -> spire.api.types.BundleMask
	22, // 14: spire.api.server.bundle.v1.BatchUpdateFederatedBundleRequest.output_mask:type_name -> spire.api.types.BundleMask
	19, // 15: spire.api.server.bundle.v1.BatchUpdateFederatedBundleResponse.results:type_name -> spire.api.server.bundle.v1.BatchUpdateFederatedBundleResponse.Result
	25, // 16: spire.api.server.bundle.v1.BatchSetFederatedBundleRequest.bundle:type_name -> spire.api.types.Bundle
	22, // 17: spire.api.server.bundle.v1.BatchSetFederatedBundleRequest.output_mask:type_name -> spire.api.types.BundleMask
	20, // 18: spire.api.server.bundle.v1.BatchSetFederatedBundleResponse.results:type_name -> spire.api.server.bundle.v1.BatchSetFederatedBundleResponse.Result
	0,  // 19: spire.api.server.bundle.v1.BatchDeleteFederatedBundleRequest.mode:type_name -> spire.api.server.bundle.v1.BatchDeleteFederatedBundleRequest.Mode
	21, // 20: spire.api.server.bundle.v1.BatchDeleteFederatedBundleResponse.results:type_name -> spire.api.server.bundle.v1.BatchDeleteFederatedBundleResponse.Result
	26, // 21: spire.api.server.bundle.v1.BatchCreateFederatedBundleResponse.Result.status:type_name -> spire.api.types.Status
	25, // 22: spire.api.server.bundle.v1.BatchCreateFederatedBundleResponse.Result.bundle:type_name -> spire.api.types.Bundle
	26, // 23: spire.api.server.bundle.v1.BatchUpdateFederatedBundleResponse.Result.status:type_name -> spire.api.types.Status
	25, // 24: spire.api.server.bundle.v1.BatchUpdateFederatedBundleResponse.Result.bundle:type_name -> spire.api.types.Bundle
	26, // 25: spire.api.server.bundle.v1.BatchSetFederatedBundleResponse.Result.status:type_name -> spire.api.types.Status
	25, // 26: spire.api.server.bundle.v1.BatchSetFederatedBundleResponse.Result.bundle:type_name -> spire.api.types.Bundle
	26, // 27: spire.api.server.bundle.v1.BatchDeleteFederatedBundleResponse.Result.status:type_name -> spire.api.types.Status
	1,  // 28: spire.api.server.bundle.v1.Bundle.CountBundles:input_type -> spire.api.server.bundle.v1.CountBundlesRequest
	3,  // 29: spire.api.server.bundle.v1.Bundle.GetBundle:input_type -> spire.api.server.bundle.v1.GetBundleRequest
	4,  // 30: spire.api.server.bundle.v1.Bundle.AppendBundle:input_type -> spire.api.server.bundle.v1.AppendBundleRequest
	5,  // 31: spire.api.server.bundle.v1.Bundle.PublishJWTAuthority:input_type -> spire.api.server.bundle.v1.PublishJWTAuthorityRequest
	7,  // 32: spire.api.server.bundle.v1.Bundle.ListFederatedBundles:input_type -> spire.api.server.bundle.v1.ListFederatedBundlesRequest
	9,  // 33: spire.api.server.bundle.v1.Bundle.GetFederatedBundle:input_type -> spire.api.server.bundle.v1.GetFederatedBundleRequest
	10, // 34: spire.api.server.bundle.v1.Bundle.BatchCreateFederatedBundle:input_type -> spire.api.server.bundle.v1.BatchCreateFederatedBundleRequest
	12, // 35: spire.api.server.bundle.v1.Bundle.BatchUpdateFederatedBundle:input_type -> spire.api.server.bundle.v1.BatchUpdateFederatedBundleRequest
	14, // 36: spire.api.server.bundle.v1.Bundle.BatchSetFederatedBundle:input_type -> spire.api.server.bundle.v1.BatchSetFederatedBundleRequest
	16, // 37: spire.api.server.bundle.v1.Bundle.BatchDeleteFederatedBundle:input_type -> spire.api.server.bundle.v1.BatchDeleteFederatedBundleRequest
	2,  // 38: spire.api.server.bundle.v1.Bundle.CountBundles:output_type -> spire.api.server.bundle.v1.CountBundlesResponse
	25, // 39: spire.api.server.bundle.v1.Bundle.GetBundle:output_type -> spire.api.types.Bundle
	25, // 40: spire.api.server.bundle.v1.Bundle.AppendBundle:output_type -> spire.api.types.Bundle
	6,  // 41: spire.api.server.bundle.v1.Bundle.PublishJWTAuthority:output_type -> spire.api.server.bundle.v1.PublishJWTAuthorityResponse
	8,  // 42: spire.api.server.bundle.v1.Bundle.ListFederatedBundles:output_type -> spire.api.server.bundle.v1.ListFederatedBundlesResponse
	25, // 43: spire.api.server.bundle.v1.Bundle.GetFederatedBundle:output_type -> spire.api.types.Bundle
	11, // 44: spire.api.server.bundle.v1.Bundle.BatchCreateFederatedBundle:output_type -> spire.api.server.bundle.v1.BatchCreateFederatedBundleResponse
	13, // 45: spire.api.server.bundle.v1.Bundle.BatchUpdateFederatedBundle:output_type -> spire.api.server.bundle.v1.BatchUpdateFederatedBundleResponse
	15, // 46: spire.api.server.bundle.v1.Bundle.BatchSetFederatedBundle:output_type -> spire.api.server.bundle.v1.BatchSetFederatedBundleResponse
	17, // 47: spire.api.server.bundle.v1.Bundle.BatchDeleteFederatedBundle:output_type -> spire.api.server.bundle.v1.BatchDeleteFederatedBundleResponse
	38, // [38:48] is the sub-list for method output_type
	28, // [28:38] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_spire_api_server_bundle_v1_bundle_proto_init() }
func file_spire_api_server_bundle_v1_bundle_proto_init() {
	if File_spire_api_server_bundle_v1_bundle_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spire_api_server_bundle_v1_bundle_proto_rawDesc), len(file_spire_api_server_bundle_v1_bundle_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spire_api_server_bundle_v1_bundle_proto_goTypes,
		DependencyIndexes: file_spire_api_server_bundle_v1_bundle_proto_depIdxs,
		EnumInfos:         file_spire_api_server_bundle_v1_bundle_proto_enumTypes,
		MessageInfos:      file_spire_api_server_bundle_v1_bundle_proto_msgTypes,
	}.Build()
	File_spire_api_server_bundle_v1_bundle_proto = out.File
	file_spire_api_server_bundle_v1_bundle_proto_goTypes = nil
	file_spire_api_server_bundle_v1_bundle_proto_depIdxs = nil
}
