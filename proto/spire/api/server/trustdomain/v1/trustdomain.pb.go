// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: spire/api/server/trustdomain/v1/trustdomain.proto

package trustdomain

import (
	types "github.com/spiffe/spire-api-sdk/proto/spire/api/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListFederationRelationshipsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An output mask indicating which federation replationship fields
	// are set in the response.
	OutputMask *types.FederationRelationshipMask `protobuf:"bytes,1,opt,name=output_mask,json=outputMask,proto3" json:"output_mask,omitempty"`
	// The maximum number of results to return. The server may further
	// constrain this value, or if zero, choose its own.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The next_page_token value returned from a previous request, if any.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListFederationRelationshipsRequest) Reset() {
	*x = ListFederationRelationshipsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFederationRelationshipsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFederationRelationshipsRequest) ProtoMessage() {}

func (x *ListFederationRelationshipsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFederationRelationshipsRequest.ProtoReflect.Descriptor instead.
func (*ListFederationRelationshipsRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_trustdomain_v1_trustdomain_proto_rawDescGZIP(), []int{0}
}

func (x *ListFederationRelationshipsRequest) GetOutputMask() *types.FederationRelationshipMask {
	if x != nil {
		return x.OutputMask
	}
	return nil
}

func (x *ListFederationRelationshipsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListFederationRelationshipsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListFederationRelationshipsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The federation relationships with foreign trust domains.
	FederationRelationships []*types.FederationRelationship `protobuf:"bytes,1,rep,name=federation_relationships,json=federationRelationships,proto3" json:"federation_relationships,omitempty"`
	// The page token for the next request. Empty if there are no more results.
	// This field should be checked by clients even when a page_size was not
	// requested, since the server may choose its own (see page_size).
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListFederationRelationshipsResponse) Reset() {
	*x = ListFederationRelationshipsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFederationRelationshipsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFederationRelationshipsResponse) ProtoMessage() {}

func (x *ListFederationRelationshipsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFederationRelationshipsResponse.ProtoReflect.Descriptor instead.
func (*ListFederationRelationshipsResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_trustdomain_v1_trustdomain_proto_rawDescGZIP(), []int{1}
}

func (x *ListFederationRelationshipsResponse) GetFederationRelationships() []*types.FederationRelationship {
	if x != nil {
		return x.FederationRelationships
	}
	return nil
}

func (x *ListFederationRelationshipsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetFederationRelationshipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The trust domain name of the federation relationship
	// (e.g., "example.org").
	TrustDomain string `protobuf:"bytes,1,opt,name=trust_domain,json=trustDomain,proto3" json:"trust_domain,omitempty"`
	// An output mask indicating which federation relationship fields
	// are set in the response.
	OutputMask *types.FederationRelationshipMask `protobuf:"bytes,2,opt,name=output_mask,json=outputMask,proto3" json:"output_mask,omitempty"`
}

func (x *GetFederationRelationshipRequest) Reset() {
	*x = GetFederationRelationshipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFederationRelationshipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFederationRelationshipRequest) ProtoMessage() {}

func (x *GetFederationRelationshipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFederationRelationshipRequest.ProtoReflect.Descriptor instead.
func (*GetFederationRelationshipRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_trustdomain_v1_trustdomain_proto_rawDescGZIP(), []int{2}
}

func (x *GetFederationRelationshipRequest) GetTrustDomain() string {
	if x != nil {
		return x.TrustDomain
	}
	return ""
}

func (x *GetFederationRelationshipRequest) GetOutputMask() *types.FederationRelationshipMask {
	if x != nil {
		return x.OutputMask
	}
	return nil
}

type BatchCreateFederationRelationshipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The federation relationships to be created.
	FederationRelationships []*types.FederationRelationship `protobuf:"bytes,1,rep,name=federation_relationships,json=federationRelationships,proto3" json:"federation_relationships,omitempty"`
	// An output mask indicating the federation relationship fields set in the response.
	OutputMask *types.FederationRelationshipMask `protobuf:"bytes,2,opt,name=output_mask,json=outputMask,proto3" json:"output_mask,omitempty"`
}

func (x *BatchCreateFederationRelationshipRequest) Reset() {
	*x = BatchCreateFederationRelationshipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateFederationRelationshipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateFederationRelationshipRequest) ProtoMessage() {}

func (x *BatchCreateFederationRelationshipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateFederationRelationshipRequest.ProtoReflect.Descriptor instead.
func (*BatchCreateFederationRelationshipRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_trustdomain_v1_trustdomain_proto_rawDescGZIP(), []int{3}
}

func (x *BatchCreateFederationRelationshipRequest) GetFederationRelationships() []*types.FederationRelationship {
	if x != nil {
		return x.FederationRelationships
	}
	return nil
}

func (x *BatchCreateFederationRelationshipRequest) GetOutputMask() *types.FederationRelationshipMask {
	if x != nil {
		return x.OutputMask
	}
	return nil
}

type BatchCreateFederationRelationshipResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result for each federation relationship in the request (order is maintained).
	Results []*BatchCreateFederationRelationshipResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *BatchCreateFederationRelationshipResponse) Reset() {
	*x = BatchCreateFederationRelationshipResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateFederationRelationshipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateFederationRelationshipResponse) ProtoMessage() {}

func (x *BatchCreateFederationRelationshipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateFederationRelationshipResponse.ProtoReflect.Descriptor instead.
func (*BatchCreateFederationRelationshipResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_trustdomain_v1_trustdomain_proto_rawDescGZIP(), []int{4}
}

func (x *BatchCreateFederationRelationshipResponse) GetResults() []*BatchCreateFederationRelationshipResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type BatchUpdateFederationRelationshipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The federation relationships to be updated.
	FederationRelationships []*types.FederationRelationship `protobuf:"bytes,1,rep,name=federation_relationships,json=federationRelationships,proto3" json:"federation_relationships,omitempty"`
	// An input mask indicating what federation relationship fields should be updated.
	InputMask *types.FederationRelationshipMask `protobuf:"bytes,2,opt,name=input_mask,json=inputMask,proto3" json:"input_mask,omitempty"`
	// An output mask indicating what federation relationship fields are set in the response.
	OutputMask *types.FederationRelationshipMask `protobuf:"bytes,3,opt,name=output_mask,json=outputMask,proto3" json:"output_mask,omitempty"`
}

func (x *BatchUpdateFederationRelationshipRequest) Reset() {
	*x = BatchUpdateFederationRelationshipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateFederationRelationshipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateFederationRelationshipRequest) ProtoMessage() {}

func (x *BatchUpdateFederationRelationshipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateFederationRelationshipRequest.ProtoReflect.Descriptor instead.
func (*BatchUpdateFederationRelationshipRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_trustdomain_v1_trustdomain_proto_rawDescGZIP(), []int{5}
}

func (x *BatchUpdateFederationRelationshipRequest) GetFederationRelationships() []*types.FederationRelationship {
	if x != nil {
		return x.FederationRelationships
	}
	return nil
}

func (x *BatchUpdateFederationRelationshipRequest) GetInputMask() *types.FederationRelationshipMask {
	if x != nil {
		return x.InputMask
	}
	return nil
}

func (x *BatchUpdateFederationRelationshipRequest) GetOutputMask() *types.FederationRelationshipMask {
	if x != nil {
		return x.OutputMask
	}
	return nil
}

type BatchUpdateFederationRelationshipResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result for each federation relationship in the request (order is maintained).
	Results []*BatchUpdateFederationRelationshipResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *BatchUpdateFederationRelationshipResponse) Reset() {
	*x = BatchUpdateFederationRelationshipResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateFederationRelationshipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateFederationRelationshipResponse) ProtoMessage() {}

func (x *BatchUpdateFederationRelationshipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateFederationRelationshipResponse.ProtoReflect.Descriptor instead.
func (*BatchUpdateFederationRelationshipResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_trustdomain_v1_trustdomain_proto_rawDescGZIP(), []int{6}
}

func (x *BatchUpdateFederationRelationshipResponse) GetResults() []*BatchUpdateFederationRelationshipResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type BatchDeleteFederationRelationshipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The trust domain names of the federation relationships
	// to delete.
	TrustDomains []string `protobuf:"bytes,1,rep,name=trust_domains,json=trustDomains,proto3" json:"trust_domains,omitempty"`
}

func (x *BatchDeleteFederationRelationshipRequest) Reset() {
	*x = BatchDeleteFederationRelationshipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteFederationRelationshipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteFederationRelationshipRequest) ProtoMessage() {}

func (x *BatchDeleteFederationRelationshipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteFederationRelationshipRequest.ProtoReflect.Descriptor instead.
func (*BatchDeleteFederationRelationshipRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_trustdomain_v1_trustdomain_proto_rawDescGZIP(), []int{7}
}

func (x *BatchDeleteFederationRelationshipRequest) GetTrustDomains() []string {
	if x != nil {
		return x.TrustDomains
	}
	return nil
}

type BatchDeleteFederationRelationshipResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result for each trust domain name in the request (order is maintained).
	Results []*BatchDeleteFederationRelationshipResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *BatchDeleteFederationRelationshipResponse) Reset() {
	*x = BatchDeleteFederationRelationshipResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteFederationRelationshipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteFederationRelationshipResponse) ProtoMessage() {}

func (x *BatchDeleteFederationRelationshipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteFederationRelationshipResponse.ProtoReflect.Descriptor instead.
func (*BatchDeleteFederationRelationshipResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_trustdomain_v1_trustdomain_proto_rawDescGZIP(), []int{8}
}

func (x *BatchDeleteFederationRelationshipResponse) GetResults() []*BatchDeleteFederationRelationshipResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type RefreshBundleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The federated trust domain name of the
	// bundle to refresh (e.g., "example.org").
	TrustDomain string `protobuf:"bytes,1,opt,name=trust_domain,json=trustDomain,proto3" json:"trust_domain,omitempty"`
}

func (x *RefreshBundleRequest) Reset() {
	*x = RefreshBundleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshBundleRequest) ProtoMessage() {}

func (x *RefreshBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshBundleRequest.ProtoReflect.Descriptor instead.
func (*RefreshBundleRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_trustdomain_v1_trustdomain_proto_rawDescGZIP(), []int{9}
}

func (x *RefreshBundleRequest) GetTrustDomain() string {
	if x != nil {
		return x.TrustDomain
	}
	return ""
}

type BatchCreateFederationRelationshipResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of creating the federation relationship.
	// Status code will be ALREADY_EXISTS if there is already a
	// federation relationship with the specified trust domain.
	Status *types.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The federation relationship that was created.
	// This will be set if the status is OK.
	FederationRelationship *types.FederationRelationship `protobuf:"bytes,2,opt,name=federation_relationship,json=federationRelationship,proto3" json:"federation_relationship,omitempty"`
}

func (x *BatchCreateFederationRelationshipResponse_Result) Reset() {
	*x = BatchCreateFederationRelationshipResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateFederationRelationshipResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateFederationRelationshipResponse_Result) ProtoMessage() {}

func (x *BatchCreateFederationRelationshipResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateFederationRelationshipResponse_Result.ProtoReflect.Descriptor instead.
func (*BatchCreateFederationRelationshipResponse_Result) Descriptor() ([]byte, []int) {
	return file_spire_api_server_trustdomain_v1_trustdomain_proto_rawDescGZIP(), []int{4, 0}
}

func (x *BatchCreateFederationRelationshipResponse_Result) GetStatus() *types.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BatchCreateFederationRelationshipResponse_Result) GetFederationRelationship() *types.FederationRelationship {
	if x != nil {
		return x.FederationRelationship
	}
	return nil
}

type BatchUpdateFederationRelationshipResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of updating the federation relationship.
	Status *types.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The federation relationship that was updated.
	// This will be set if the status is OK.
	FederationRelationship *types.FederationRelationship `protobuf:"bytes,2,opt,name=federation_relationship,json=federationRelationship,proto3" json:"federation_relationship,omitempty"`
}

func (x *BatchUpdateFederationRelationshipResponse_Result) Reset() {
	*x = BatchUpdateFederationRelationshipResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateFederationRelationshipResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateFederationRelationshipResponse_Result) ProtoMessage() {}

func (x *BatchUpdateFederationRelationshipResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateFederationRelationshipResponse_Result.ProtoReflect.Descriptor instead.
func (*BatchUpdateFederationRelationshipResponse_Result) Descriptor() ([]byte, []int) {
	return file_spire_api_server_trustdomain_v1_trustdomain_proto_rawDescGZIP(), []int{6, 0}
}

func (x *BatchUpdateFederationRelationshipResponse_Result) GetStatus() *types.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BatchUpdateFederationRelationshipResponse_Result) GetFederationRelationship() *types.FederationRelationship {
	if x != nil {
		return x.FederationRelationship
	}
	return nil
}

type BatchDeleteFederationRelationshipResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of delating the federation relationship.
	Status *types.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The trust domain name of the federation relationship
	// that was deleted.
	TrustDomain string `protobuf:"bytes,2,opt,name=trust_domain,json=trustDomain,proto3" json:"trust_domain,omitempty"`
}

func (x *BatchDeleteFederationRelationshipResponse_Result) Reset() {
	*x = BatchDeleteFederationRelationshipResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteFederationRelationshipResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteFederationRelationshipResponse_Result) ProtoMessage() {}

func (x *BatchDeleteFederationRelationshipResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteFederationRelationshipResponse_Result.ProtoReflect.Descriptor instead.
func (*BatchDeleteFederationRelationshipResponse_Result) Descriptor() ([]byte, []int) {
	return file_spire_api_server_trustdomain_v1_trustdomain_proto_rawDescGZIP(), []int{8, 0}
}

func (x *BatchDeleteFederationRelationshipResponse_Result) GetStatus() *types.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BatchDeleteFederationRelationshipResponse_Result) GetTrustDomain() string {
	if x != nil {
		return x.TrustDomain
	}
	return ""
}

var File_spire_api_server_trustdomain_v1_trustdomain_proto protoreflect.FileDescriptor

var file_spire_api_server_trustdomain_v1_trustdomain_proto_rawDesc = []byte{
	0x0a, 0x31, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2c, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xae, 0x01,
	0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb1,
	0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x18, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x52, 0x17, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x93, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x4c, 0x0a, 0x0b, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xdc, 0x01, 0x0a, 0x28, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x18, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x17, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xb6, 0x02, 0x0a, 0x29, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x1a, 0x9b, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x60,
	0x0a, 0x17, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x16, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x22, 0xa8, 0x02, 0x0a, 0x28, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a,
	0x18, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x17, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x4c, 0x0a,
	0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xb6, 0x02, 0x0a, 0x29,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x9b, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x60, 0x0a, 0x17, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x16, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x22, 0x4f, 0x0a, 0x28, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x29, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x1a, 0x5c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x39,
	0x0a, 0x14, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x32, 0xd9, 0x07, 0x0a, 0x0b, 0x54, 0x72,
	0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0xa8, 0x01, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x43, 0x2e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44,
	0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x12, 0x41, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0xba,
	0x01, 0x0a, 0x21, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x12, 0x49, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x4a, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xba, 0x01, 0x0a, 0x21,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x12, 0x49, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xba, 0x01, 0x0a, 0x21, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x49,
	0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0d, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x35, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x53, 0x5a, 0x51, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x2f, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2d, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_spire_api_server_trustdomain_v1_trustdomain_proto_rawDescOnce sync.Once
	file_spire_api_server_trustdomain_v1_trustdomain_proto_rawDescData = file_spire_api_server_trustdomain_v1_trustdomain_proto_rawDesc
)

func file_spire_api_server_trustdomain_v1_trustdomain_proto_rawDescGZIP() []byte {
	file_spire_api_server_trustdomain_v1_trustdomain_proto_rawDescOnce.Do(func() {
		file_spire_api_server_trustdomain_v1_trustdomain_proto_rawDescData = protoimpl.X.CompressGZIP(file_spire_api_server_trustdomain_v1_trustdomain_proto_rawDescData)
	})
	return file_spire_api_server_trustdomain_v1_trustdomain_proto_rawDescData
}

var file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_spire_api_server_trustdomain_v1_trustdomain_proto_goTypes = []interface{}{
	(*ListFederationRelationshipsRequest)(nil),               // 0: spire.api.server.trustdomain.v1.ListFederationRelationshipsRequest
	(*ListFederationRelationshipsResponse)(nil),              // 1: spire.api.server.trustdomain.v1.ListFederationRelationshipsResponse
	(*GetFederationRelationshipRequest)(nil),                 // 2: spire.api.server.trustdomain.v1.GetFederationRelationshipRequest
	(*BatchCreateFederationRelationshipRequest)(nil),         // 3: spire.api.server.trustdomain.v1.BatchCreateFederationRelationshipRequest
	(*BatchCreateFederationRelationshipResponse)(nil),        // 4: spire.api.server.trustdomain.v1.BatchCreateFederationRelationshipResponse
	(*BatchUpdateFederationRelationshipRequest)(nil),         // 5: spire.api.server.trustdomain.v1.BatchUpdateFederationRelationshipRequest
	(*BatchUpdateFederationRelationshipResponse)(nil),        // 6: spire.api.server.trustdomain.v1.BatchUpdateFederationRelationshipResponse
	(*BatchDeleteFederationRelationshipRequest)(nil),         // 7: spire.api.server.trustdomain.v1.BatchDeleteFederationRelationshipRequest
	(*BatchDeleteFederationRelationshipResponse)(nil),        // 8: spire.api.server.trustdomain.v1.BatchDeleteFederationRelationshipResponse
	(*RefreshBundleRequest)(nil),                             // 9: spire.api.server.trustdomain.v1.RefreshBundleRequest
	(*BatchCreateFederationRelationshipResponse_Result)(nil), // 10: spire.api.server.trustdomain.v1.BatchCreateFederationRelationshipResponse.Result
	(*BatchUpdateFederationRelationshipResponse_Result)(nil), // 11: spire.api.server.trustdomain.v1.BatchUpdateFederationRelationshipResponse.Result
	(*BatchDeleteFederationRelationshipResponse_Result)(nil), // 12: spire.api.server.trustdomain.v1.BatchDeleteFederationRelationshipResponse.Result
	(*types.FederationRelationshipMask)(nil),                 // 13: spire.api.types.FederationRelationshipMask
	(*types.FederationRelationship)(nil),                     // 14: spire.api.types.FederationRelationship
	(*types.Status)(nil),                                     // 15: spire.api.types.Status
	(*emptypb.Empty)(nil),                                    // 16: google.protobuf.Empty
}
var file_spire_api_server_trustdomain_v1_trustdomain_proto_depIdxs = []int32{
	13, // 0: spire.api.server.trustdomain.v1.ListFederationRelationshipsRequest.output_mask:type_name -> spire.api.types.FederationRelationshipMask
	14, // 1: spire.api.server.trustdomain.v1.ListFederationRelationshipsResponse.federation_relationships:type_name -> spire.api.types.FederationRelationship
	13, // 2: spire.api.server.trustdomain.v1.GetFederationRelationshipRequest.output_mask:type_name -> spire.api.types.FederationRelationshipMask
	14, // 3: spire.api.server.trustdomain.v1.BatchCreateFederationRelationshipRequest.federation_relationships:type_name -> spire.api.types.FederationRelationship
	13, // 4: spire.api.server.trustdomain.v1.BatchCreateFederationRelationshipRequest.output_mask:type_name -> spire.api.types.FederationRelationshipMask
	10, // 5: spire.api.server.trustdomain.v1.BatchCreateFederationRelationshipResponse.results:type_name -> spire.api.server.trustdomain.v1.BatchCreateFederationRelationshipResponse.Result
	14, // 6: spire.api.server.trustdomain.v1.BatchUpdateFederationRelationshipRequest.federation_relationships:type_name -> spire.api.types.FederationRelationship
	13, // 7: spire.api.server.trustdomain.v1.BatchUpdateFederationRelationshipRequest.input_mask:type_name -> spire.api.types.FederationRelationshipMask
	13, // 8: spire.api.server.trustdomain.v1.BatchUpdateFederationRelationshipRequest.output_mask:type_name -> spire.api.types.FederationRelationshipMask
	11, // 9: spire.api.server.trustdomain.v1.BatchUpdateFederationRelationshipResponse.results:type_name -> spire.api.server.trustdomain.v1.BatchUpdateFederationRelationshipResponse.Result
	12, // 10: spire.api.server.trustdomain.v1.BatchDeleteFederationRelationshipResponse.results:type_name -> spire.api.server.trustdomain.v1.BatchDeleteFederationRelationshipResponse.Result
	15, // 11: spire.api.server.trustdomain.v1.BatchCreateFederationRelationshipResponse.Result.status:type_name -> spire.api.types.Status
	14, // 12: spire.api.server.trustdomain.v1.BatchCreateFederationRelationshipResponse.Result.federation_relationship:type_name -> spire.api.types.FederationRelationship
	15, // 13: spire.api.server.trustdomain.v1.BatchUpdateFederationRelationshipResponse.Result.status:type_name -> spire.api.types.Status
	14, // 14: spire.api.server.trustdomain.v1.BatchUpdateFederationRelationshipResponse.Result.federation_relationship:type_name -> spire.api.types.FederationRelationship
	15, // 15: spire.api.server.trustdomain.v1.BatchDeleteFederationRelationshipResponse.Result.status:type_name -> spire.api.types.Status
	0,  // 16: spire.api.server.trustdomain.v1.TrustDomain.ListFederationRelationships:input_type -> spire.api.server.trustdomain.v1.ListFederationRelationshipsRequest
	2,  // 17: spire.api.server.trustdomain.v1.TrustDomain.GetFederationRelationship:input_type -> spire.api.server.trustdomain.v1.GetFederationRelationshipRequest
	3,  // 18: spire.api.server.trustdomain.v1.TrustDomain.BatchCreateFederationRelationship:input_type -> spire.api.server.trustdomain.v1.BatchCreateFederationRelationshipRequest
	5,  // 19: spire.api.server.trustdomain.v1.TrustDomain.BatchUpdateFederationRelationship:input_type -> spire.api.server.trustdomain.v1.BatchUpdateFederationRelationshipRequest
	7,  // 20: spire.api.server.trustdomain.v1.TrustDomain.BatchDeleteFederationRelationship:input_type -> spire.api.server.trustdomain.v1.BatchDeleteFederationRelationshipRequest
	9,  // 21: spire.api.server.trustdomain.v1.TrustDomain.RefreshBundle:input_type -> spire.api.server.trustdomain.v1.RefreshBundleRequest
	1,  // 22: spire.api.server.trustdomain.v1.TrustDomain.ListFederationRelationships:output_type -> spire.api.server.trustdomain.v1.ListFederationRelationshipsResponse
	14, // 23: spire.api.server.trustdomain.v1.TrustDomain.GetFederationRelationship:output_type -> spire.api.types.FederationRelationship
	4,  // 24: spire.api.server.trustdomain.v1.TrustDomain.BatchCreateFederationRelationship:output_type -> spire.api.server.trustdomain.v1.BatchCreateFederationRelationshipResponse
	6,  // 25: spire.api.server.trustdomain.v1.TrustDomain.BatchUpdateFederationRelationship:output_type -> spire.api.server.trustdomain.v1.BatchUpdateFederationRelationshipResponse
	8,  // 26: spire.api.server.trustdomain.v1.TrustDomain.BatchDeleteFederationRelationship:output_type -> spire.api.server.trustdomain.v1.BatchDeleteFederationRelationshipResponse
	16, // 27: spire.api.server.trustdomain.v1.TrustDomain.RefreshBundle:output_type -> google.protobuf.Empty
	22, // [22:28] is the sub-list for method output_type
	16, // [16:22] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_spire_api_server_trustdomain_v1_trustdomain_proto_init() }
func file_spire_api_server_trustdomain_v1_trustdomain_proto_init() {
	if File_spire_api_server_trustdomain_v1_trustdomain_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFederationRelationshipsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFederationRelationshipsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFederationRelationshipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCreateFederationRelationshipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCreateFederationRelationshipResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateFederationRelationshipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateFederationRelationshipResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDeleteFederationRelationshipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDeleteFederationRelationshipResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshBundleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCreateFederationRelationshipResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateFederationRelationshipResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDeleteFederationRelationshipResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spire_api_server_trustdomain_v1_trustdomain_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spire_api_server_trustdomain_v1_trustdomain_proto_goTypes,
		DependencyIndexes: file_spire_api_server_trustdomain_v1_trustdomain_proto_depIdxs,
		MessageInfos:      file_spire_api_server_trustdomain_v1_trustdomain_proto_msgTypes,
	}.Build()
	File_spire_api_server_trustdomain_v1_trustdomain_proto = out.File
	file_spire_api_server_trustdomain_v1_trustdomain_proto_rawDesc = nil
	file_spire_api_server_trustdomain_v1_trustdomain_proto_goTypes = nil
	file_spire_api_server_trustdomain_v1_trustdomain_proto_depIdxs = nil
}
